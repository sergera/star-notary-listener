// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package starnotary

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StarnotaryMetaData contains all meta data concerning the Starnotary contract.
var StarnotaryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newName\",\"type\":\"bytes\"}],\"name\":\"ChangeName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes19\",\"name\":\"coordinates\",\"type\":\"bytes19\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"PutForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RemoveFromSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_name\",\"type\":\"bytes\"}],\"name\":\"changeStarName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes19\",\"name\":\"\",\"type\":\"bytes19\"}],\"name\":\"coordinatesToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_coordinates\",\"type\":\"bytes\"}],\"name\":\"createStar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseStar\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"putStarUpForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeStarFromSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"starNameToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToStar\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes2\",\"name\":\"RAHours\",\"type\":\"bytes2\"},{\"internalType\":\"bytes2\",\"name\":\"RAMinutes\",\"type\":\"bytes2\"},{\"internalType\":\"bytes5\",\"name\":\"RASeconds\",\"type\":\"bytes5\"},{\"internalType\":\"bytes3\",\"name\":\"decDegrees\",\"type\":\"bytes3\"},{\"internalType\":\"bytes2\",\"name\":\"decArcMinutes\",\"type\":\"bytes2\"},{\"internalType\":\"bytes5\",\"name\":\"decArcSeconds\",\"type\":\"bytes5\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600481526020017f53746172000000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f5354415200000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000b8565b508060019080519060200190620000af929190620000b8565b505050620001cd565b828054620000c69062000197565b90600052602060002090601f016020900481019282620000ea576000855562000136565b82601f106200010557805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013557825182559160200191906001019062000118565b5b50905062000145919062000149565b5090565b5b80821115620001645760008160009055506001016200014a565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001b057607f821691505b60208210811415620001c757620001c662000168565b5b50919050565b614ff780620001dd6000396000f3fe6080604052600436106101405760003560e01c8063481d49e1116100b6578063b88d4fde1161006f578063b88d4fde14610475578063c87b56dd1461049e578063cfa92af9146104db578063e0cc0cfb14610518578063e48b396114610541578063e985e9c51461057e57610140565b8063481d49e1146103625780636352211e1461038b57806370a08231146103c85780639369394b1461040557806395d89b4114610421578063a22cb4651461044c57610140565b80631350601b116101085780631350601b1461023c57806318160ddd1461027957806323b872dd146102a4578063267d9ae1146102cd578063316a43611461031057806342842e0e1461033957610140565b806301ffc9a71461014557806304a4a48c1461018257806306fdde03146101ab578063081812fc146101d6578063095ea7b314610213575b600080fd5b34801561015157600080fd5b5061016c600480360381019061016791906130eb565b6105bb565b6040516101799190613133565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a491906131e9565b61069d565b005b3480156101b757600080fd5b506101c0610883565b6040516101cd91906132e2565b60405180910390f35b3480156101e257600080fd5b506101fd60048036038101906101f89190613304565b610915565b60405161020a9190613372565b60405180910390f35b34801561021f57600080fd5b5061023a600480360381019061023591906133b9565b61099a565b005b34801561024857600080fd5b50610263600480360381019061025e9190613529565b610ab2565b6040516102709190613581565b60405180910390f35b34801561028557600080fd5b5061028e610ae0565b60405161029b9190613581565b60405180910390f35b3480156102b057600080fd5b506102cb60048036038101906102c6919061359c565b610aea565b005b3480156102d957600080fd5b506102f460048036038101906102ef9190613304565b610b4a565b60405161030797969594939291906136f5565b60405180910390f35b34801561031c57600080fd5b506103376004803603810190610332919061376b565b610c62565b005b34801561034557600080fd5b50610360600480360381019061035b919061359c565b610d39565b005b34801561036e57600080fd5b5061038960048036038101906103849190613304565b610d59565b005b34801561039757600080fd5b506103b260048036038101906103ad9190613304565b610e2d565b6040516103bf9190613372565b60405180910390f35b3480156103d457600080fd5b506103ef60048036038101906103ea91906137ab565b610edf565b6040516103fc9190613581565b60405180910390f35b61041f600480360381019061041a9190613304565b610f97565b005b34801561042d57600080fd5b506104366111bb565b60405161044391906132e2565b60405180910390f35b34801561045857600080fd5b50610473600480360381019061046e9190613804565b61124d565b005b34801561048157600080fd5b5061049c60048036038101906104979190613844565b611263565b005b3480156104aa57600080fd5b506104c560048036038101906104c09190613304565b6112c5565b6040516104d291906132e2565b60405180910390f35b3480156104e757600080fd5b5061050260048036038101906104fd9190613304565b61136c565b60405161050f9190613581565b60405180910390f35b34801561052457600080fd5b5061053f600480360381019061053a91906138c7565b611384565b005b34801561054d57600080fd5b50610568600480360381019061056391906139a0565b611af7565b6040516105759190613581565b60405180910390f35b34801561058a57600080fd5b506105a560048036038101906105a091906139cd565b611b0f565b6040516105b29190613133565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061068657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610696575061069582611ba3565b5b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff166106bd84610e2d565b73ffffffffffffffffffffffffffffffffffffffff1614610713576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070a90613a7f565b60405180910390fd5b61071d8282611c0d565b61075c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075390613aeb565b60405180910390fd5b600060098383604051610770929190613b3b565b908152602001604051809103902054146107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b690613ba0565b60405180910390fd5b6009600660008581526020019081526020016000206000016040516107e49190613cb5565b908152602001604051809103902060009055818160066000868152602001908152602001600020600001919061081b929190612f56565b50826009838360405161082f929190613b3b565b9081526020016040518091039020819055507ff744b02e2965631679dba1d6ccc015286348dc6452ab377764b9bce7c65aec0c338484846040516108769493929190613cf9565b60405180910390a1505050565b60606000805461089290613bef565b80601f01602080910402602001604051908101604052809291908181526020018280546108be90613bef565b801561090b5780601f106108e05761010080835404028352916020019161090b565b820191906000526020600020905b8154815290600101906020018083116108ee57829003601f168201915b5050505050905090565b600061092082611d8c565b61095f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095690613dab565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006109a582610e2d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0d90613e3d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a35611df8565b73ffffffffffffffffffffffffffffffffffffffff161480610a645750610a6381610a5e611df8565b611b0f565b5b610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a90613ecf565b60405180910390fd5b610aad8383611e00565b505050565b6009818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000600a54905090565b610afb610af5611df8565b82611eb9565b610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3190613f61565b60405180910390fd5b610b45838383611f97565b505050565b6006602052806000526040600020600091509050806000018054610b6d90613bef565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9990613bef565b8015610be65780601f10610bbb57610100808354040283529160200191610be6565b820191906000526020600020905b815481529060010190602001808311610bc957829003601f168201915b5050505050908060010160009054906101000a900460f01b908060010160029054906101000a900460f01b908060010160049054906101000a900460d81b908060010160099054906101000a900460e81b9080600101600c9054906101000a900460f01b9080600101600e9054906101000a900460d81b905087565b3373ffffffffffffffffffffffffffffffffffffffff16610c8283610e2d565b73ffffffffffffffffffffffffffffffffffffffff1614610cd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccf90613ff3565b60405180910390fd5b610ce2308361099a565b8060076000848152602001908152602001600020819055507feef8701c784dcc5b12eb5ce2687a9e42d1d94b6e81f660dcb84b51554c37f082338383604051610d2d93929190614013565b60405180910390a15050565b610d5483838360405180602001604052806000815250611263565b505050565b3373ffffffffffffffffffffffffffffffffffffffff16610d7982610e2d565b73ffffffffffffffffffffffffffffffffffffffff1614610dcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc6906140bc565b60405180910390fd5b610dda60008261099a565b60076000828152602001908152602001600020600090557fbfbf7e7677a0c423106146f1ee86ac042526b53581de06ba54c51e8acfeac7463382604051610e229291906140dc565b60405180910390a150565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ed6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecd90614177565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4790614209565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600760008381526020019081526020016000205411610fed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe490614275565b60405180910390fd5b600060076000838152602001908152602001600020549050600061101083610e2d565b905081341015611055576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104c90614307565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff166323b872dd8233866040518463ffffffff1660e01b815260040161109293929190614327565b600060405180830381600087803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561110a573d6000803e3d6000fd5b5081341115611166573373ffffffffffffffffffffffffffffffffffffffff166108fc8334611139919061438d565b9081150290604051600060405180830381858888f19350505050158015611164573d6000803e3d6000fd5b505b60076000848152602001908152602001600020600090557f2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f63233846040516111ae9291906140dc565b60405180910390a1505050565b6060600180546111ca90613bef565b80601f01602080910402602001604051908101604052809291908181526020018280546111f690613bef565b80156112435780601f1061121857610100808354040283529160200191611243565b820191906000526020600020905b81548152906001019060200180831161122657829003601f168201915b5050505050905090565b61125f611258611df8565b83836121fe565b5050565b61127461126e611df8565b83611eb9565b6112b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112aa90613f61565b60405180910390fd5b6112bf8484848461236b565b50505050565b60606112d082611d8c565b61130f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130690614433565b60405180910390fd5b60006113196123c7565b905060008151116113395760405180602001604052806000815250611364565b80611343846123de565b60405160200161135492919061448f565b6040516020818303038152906040525b915050919050565b60076020528060005260406000206000915090505481565b61138e8484611c0d565b6113cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c490613aeb565b60405180910390fd5b6000600985856040516113e1929190613b3b565b90815260200160405180910390205414611430576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142790613ba0565b60405180910390fd5b6114578282600090600292611447939291906144bd565b906114529190614510565b61253f565b611496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148d906145bb565b60405180910390fd5b6114bd82826002906004926114ad939291906144bd565b906114b89190614510565b61263c565b6114fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f390614627565b60405180910390fd5b6115238282600490600992611513939291906144bd565b9061151e9190614647565b612739565b611562576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611559906146f2565b60405180910390fd5b6115898282600990600c92611579939291906144bd565b906115849190614712565b6128bd565b6115c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bf906147bd565b60405180910390fd5b6115ef8282600c90600e926115df939291906144bd565b906115ea9190614510565b61263c565b61162e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162590614829565b60405180910390fd5b6116558282600e90601392611645939291906144bd565b906116509190614647565b612739565b611694576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168b90614895565b60405180910390fd5b6000600860008484906116a791906148b5565b6cffffffffffffffffffffffffff19166cffffffffffffffffffffffffff191681526020019081526020016000205414611716576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170d90614960565b60405180910390fd5b60006040518060e0016040528086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018484600090600292611781939291906144bd565b9061178c9190614510565b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200184846002906004926117c6939291906144bd565b906117d19190614510565b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001848460049060099261180b939291906144bd565b906118169190614647565b7affffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018484600990600c9261184d939291906144bd565b906118589190614712565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018484600c90600e92611891939291906144bd565b9061189c9190614510565b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018484600e906013926118d6939291906144bd565b906118e19190614647565b7affffffffffffffffffffffffffffffffffffffffffffffffffffff191681525090506001600a60008282546119179190614980565b925050819055506000611928610ae0565b9050806008600086869061193c91906148b5565b6cffffffffffffffffffffffffff19166cffffffffffffffffffffffffff19168152602001908152602001600020819055508060098787604051611981929190613b3b565b908152602001604051809103902081905550816006600083815260200190815260200160002060008201518160000190805190602001906119c3929190612fdc565b5060208201518160010160006101000a81548161ffff021916908360f01c021790555060408201518160010160026101000a81548161ffff021916908360f01c021790555060608201518160010160046101000a81548164ffffffffff021916908360d81c021790555060808201518160010160096101000a81548162ffffff021916908360e81c021790555060a082015181600101600c6101000a81548161ffff021916908360f01c021790555060c082015181600101600e6101000a81548164ffffffffff021916908360d81c0217905550905050611aa433826129e7565b7f645f015284b54bc389e86c58c9e6fa711dabfe2a1fd7d7fdf9440458b00745873382868690611ad491906148b5565b8989604051611ae79594939291906149e5565b60405180910390a1505050505050565b60086020528060005260406000206000915090505481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006020838390501115611c245760009050611d86565b6002838390501015611c395760009050611d86565b611c5f83836000818110611c5057611c4f614a33565b5b9050013560f81c60f81b612bc1565b15611c6d5760009050611d86565b60008060008060005b878790508160ff161015611d555787878260ff16818110611c9a57611c99614a33565b5b9050013560f81c60f81b9450611caf85612c03565b9350611cba85612bc1565b925083158015611cc8575082155b15611cdb57600095505050505050611d86565b60008160ff161115611d3857828015611d245750611d238888600184611d019190614a6f565b60ff16818110611d1457611d13614a33565b5b9050013560f81c60f81b612bc1565b5b15611d3757600095505050505050611d86565b5b8315611d42578091505b8080611d4d90614aa3565b915050611c76565b50600187879050611d66919061438d565b8160ff161015611d7d576000945050505050611d86565b60019450505050505b92915050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611e7383610e2d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611ec482611d8c565b611f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611efa90614b3f565b60405180910390fd5b6000611f0e83610e2d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f7d57508373ffffffffffffffffffffffffffffffffffffffff16611f6584610915565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f8e5750611f8d8185611b0f565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611fb782610e2d565b73ffffffffffffffffffffffffffffffffffffffff161461200d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200490614bd1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561207d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207490614c63565b60405180910390fd5b612088838383612c76565b612093600082611e00565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120e3919061438d565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461213a9190614980565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46121f9838383612c7b565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561226d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226490614ccf565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161235e9190613133565b60405180910390a3505050565b612376848484611f97565b61238284848484612c80565b6123c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b890614d61565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000821415612426576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061253a565b600082905060005b6000821461245857808061244190614d81565b915050600a826124519190614df9565b915061242e565b60008167ffffffffffffffff811115612474576124736133fe565b5b6040519080825280601f01601f1916602001820160405280156124a65781602001600182028036833780820191505090505b5090505b60008514612533576001826124bf919061438d565b9150600a856124ce9190614e2a565b60306124da9190614980565b60f81b8183815181106124f0576124ef614a33565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561252c9190614df9565b94506124aa565b8093505050505b919050565b60006125618260006002811061255857612557614a33565b5b1a60f81b612e08565b61256e5760009050612637565b61258e8260016002811061258557612584614a33565b5b1a60f81b612e08565b61259b5760009050612637565b603660f81b826000600281106125b4576125b3614a33565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156126245750603060f81b826001600281106125fb576125fa614a33565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156126325760009050612637565b600190505b919050565b600061265e8260006002811061265557612654614a33565b5b1a60f81b612e08565b61266b5760009050612734565b61268b8260016002811061268257612681614a33565b5b1a60f81b612e08565b6126985760009050612734565b603660f81b826000600281106126b1576126b0614a33565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156127215750603060f81b826001600281106126f8576126f7614a33565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561272f5760009050612734565b600190505b919050565b600061275b8260006005811061275257612751614a33565b5b1a60f81b612e08565b61276857600090506128b8565b6127888260016005811061277f5761277e614a33565b5b1a60f81b612e08565b61279557600090506128b8565b6127b5826002600581106127ac576127ab614a33565b5b1a60f81b612e7b565b6127c257600090506128b8565b6127e2826003600581106127d9576127d8614a33565b5b1a60f81b612e08565b6127ef57600090506128b8565b61280f8260046005811061280657612805614a33565b5b1a60f81b612e08565b61281c57600090506128b8565b603660f81b8260006005811061283557612834614a33565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156128a55750603060f81b8260016005811061287c5761287b614a33565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156128b357600090506128b8565b600190505b919050565b60006128df826000600381106128d6576128d5614a33565b5b1a60f81b612ebd565b6128ec57600090506129e2565b61290c8260016003811061290357612902614a33565b5b1a60f81b612e08565b61291957600090506129e2565b612939826002600381106129305761292f614a33565b5b1a60f81b612e08565b61294657600090506129e2565b603960f81b8260016003811061295f5761295e614a33565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156129cf5750603060f81b826002600381106129a6576129a5614a33565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156129dd57600090506129e2565b600190505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4e90614ea7565b60405180910390fd5b612a6081611d8c565b15612aa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9790614f13565b60405180910390fd5b612aac60008383612c76565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612afc9190614980565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612bbd60008383612c7b565b5050565b6000602060f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612bf95760009050612bfe565b600190505b919050565b6000606160f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161080612c5e5750607a60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916115b15612c6c5760009050612c71565b600190505b919050565b505050565b505050565b6000612ca18473ffffffffffffffffffffffffffffffffffffffff16612f33565b15612dfb578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612cca611df8565b8786866040518563ffffffff1660e01b8152600401612cec9493929190614f33565b6020604051808303816000875af1925050508015612d2857506040513d601f19601f82011682018060405250810190612d259190614f94565b60015b612dab573d8060008114612d58576040519150601f19603f3d011682016040523d82523d6000602084013e612d5d565b606091505b50600081511415612da3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9a90614d61565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612e00565b600190505b949350505050565b6000603060f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161080612e635750603960f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916115b15612e715760009050612e76565b600190505b919050565b6000602e60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612eb35760009050612eb8565b600190505b919050565b6000602b60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614158015612f1b5750602d60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b15612f295760009050612f2e565b600190505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612f6290613bef565b90600052602060002090601f016020900481019282612f845760008555612fcb565b82601f10612f9d57803560ff1916838001178555612fcb565b82800160010185558215612fcb579182015b82811115612fca578235825591602001919060010190612faf565b5b509050612fd89190613062565b5090565b828054612fe890613bef565b90600052602060002090601f01602090048101928261300a5760008555613051565b82601f1061302357805160ff1916838001178555613051565b82800160010185558215613051579182015b82811115613050578251825591602001919060010190613035565b5b50905061305e9190613062565b5090565b5b8082111561307b576000816000905550600101613063565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6130c881613093565b81146130d357600080fd5b50565b6000813590506130e5816130bf565b92915050565b60006020828403121561310157613100613089565b5b600061310f848285016130d6565b91505092915050565b60008115159050919050565b61312d81613118565b82525050565b60006020820190506131486000830184613124565b92915050565b6000819050919050565b6131618161314e565b811461316c57600080fd5b50565b60008135905061317e81613158565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126131a9576131a8613184565b5b8235905067ffffffffffffffff8111156131c6576131c5613189565b5b6020830191508360018202830111156131e2576131e161318e565b5b9250929050565b60008060006040848603121561320257613201613089565b5b60006132108682870161316f565b935050602084013567ffffffffffffffff8111156132315761323061308e565b5b61323d86828701613193565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015613283578082015181840152602081019050613268565b83811115613292576000848401525b50505050565b6000601f19601f8301169050919050565b60006132b482613249565b6132be8185613254565b93506132ce818560208601613265565b6132d781613298565b840191505092915050565b600060208201905081810360008301526132fc81846132a9565b905092915050565b60006020828403121561331a57613319613089565b5b60006133288482850161316f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061335c82613331565b9050919050565b61336c81613351565b82525050565b60006020820190506133876000830184613363565b92915050565b61339681613351565b81146133a157600080fd5b50565b6000813590506133b38161338d565b92915050565b600080604083850312156133d0576133cf613089565b5b60006133de858286016133a4565b92505060206133ef8582860161316f565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61343682613298565b810181811067ffffffffffffffff82111715613455576134546133fe565b5b80604052505050565b600061346861307f565b9050613474828261342d565b919050565b600067ffffffffffffffff821115613494576134936133fe565b5b61349d82613298565b9050602081019050919050565b82818337600083830152505050565b60006134cc6134c784613479565b61345e565b9050828152602081018484840111156134e8576134e76133f9565b5b6134f38482856134aa565b509392505050565b600082601f8301126135105761350f613184565b5b81356135208482602086016134b9565b91505092915050565b60006020828403121561353f5761353e613089565b5b600082013567ffffffffffffffff81111561355d5761355c61308e565b5b613569848285016134fb565b91505092915050565b61357b8161314e565b82525050565b60006020820190506135966000830184613572565b92915050565b6000806000606084860312156135b5576135b4613089565b5b60006135c3868287016133a4565b93505060206135d4868287016133a4565b92505060406135e58682870161316f565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000613616826135ef565b61362081856135fa565b9350613630818560208601613265565b61363981613298565b840191505092915050565b60007fffff00000000000000000000000000000000000000000000000000000000000082169050919050565b61367981613644565b82525050565b60007fffffffffff00000000000000000000000000000000000000000000000000000082169050919050565b6136b48161367f565b82525050565b60007fffffff000000000000000000000000000000000000000000000000000000000082169050919050565b6136ef816136ba565b82525050565b600060e082019050818103600083015261370f818a61360b565b905061371e6020830189613670565b61372b6040830188613670565b61373860608301876136ab565b61374560808301866136e6565b61375260a0830185613670565b61375f60c08301846136ab565b98975050505050505050565b6000806040838503121561378257613781613089565b5b60006137908582860161316f565b92505060206137a18582860161316f565b9150509250929050565b6000602082840312156137c1576137c0613089565b5b60006137cf848285016133a4565b91505092915050565b6137e181613118565b81146137ec57600080fd5b50565b6000813590506137fe816137d8565b92915050565b6000806040838503121561381b5761381a613089565b5b6000613829858286016133a4565b925050602061383a858286016137ef565b9150509250929050565b6000806000806080858703121561385e5761385d613089565b5b600061386c878288016133a4565b945050602061387d878288016133a4565b935050604061388e8782880161316f565b925050606085013567ffffffffffffffff8111156138af576138ae61308e565b5b6138bb878288016134fb565b91505092959194509250565b600080600080604085870312156138e1576138e0613089565b5b600085013567ffffffffffffffff8111156138ff576138fe61308e565b5b61390b87828801613193565b9450945050602085013567ffffffffffffffff81111561392e5761392d61308e565b5b61393a87828801613193565b925092505092959194509250565b60007fffffffffffffffffffffffffffffffffffffff0000000000000000000000000082169050919050565b61397d81613948565b811461398857600080fd5b50565b60008135905061399a81613974565b92915050565b6000602082840312156139b6576139b5613089565b5b60006139c48482850161398b565b91505092915050565b600080604083850312156139e4576139e3613089565b5b60006139f2858286016133a4565b9250506020613a03858286016133a4565b9150509250929050565b7f796f752063616e277420656469742061207374617220796f7520646f6e27742060008201527f6f776e0000000000000000000000000000000000000000000000000000000000602082015250565b6000613a69602383613254565b9150613a7482613a0d565b604082019050919050565b60006020820190508181036000830152613a9881613a5c565b9050919050565b7f73746172206e616d6520696e76616c6964000000000000000000000000000000600082015250565b6000613ad5601183613254565b9150613ae082613a9f565b602082019050919050565b60006020820190508181036000830152613b0481613ac8565b9050919050565b600081905092915050565b6000613b228385613b0b565b9350613b2f8385846134aa565b82840190509392505050565b6000613b48828486613b16565b91508190509392505050565b7f73746172206e616d652063757272656e746c7920696e20757365000000000000600082015250565b6000613b8a601a83613254565b9150613b9582613b54565b602082019050919050565b60006020820190508181036000830152613bb981613b7d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613c0757607f821691505b60208210811415613c1b57613c1a613bc0565b5b50919050565b60008190508160005260206000209050919050565b60008154613c4381613bef565b613c4d8186613b0b565b94506001821660008114613c685760018114613c7957613cac565b60ff19831686528186019350613cac565b613c8285613c21565b60005b83811015613ca457815481890152600182019150602081019050613c85565b838801955050505b50505092915050565b6000613cc18284613c36565b915081905092915050565b6000613cd883856135fa565b9350613ce58385846134aa565b613cee83613298565b840190509392505050565b6000606082019050613d0e6000830187613363565b613d1b6020830186613572565b8181036040830152613d2e818486613ccc565b905095945050505050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613d95602c83613254565b9150613da082613d39565b604082019050919050565b60006020820190508181036000830152613dc481613d88565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613e27602183613254565b9150613e3282613dcb565b604082019050919050565b60006020820190508181036000830152613e5681613e1a565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000613eb9603883613254565b9150613ec482613e5d565b604082019050919050565b60006020820190508181036000830152613ee881613eac565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000613f4b603183613254565b9150613f5682613eef565b604082019050919050565b60006020820190508181036000830152613f7a81613f3e565b9050919050565b7f796f752063616e27742070757420666f722073616c652061207374617220796f60008201527f7520646f6e2774206f776e000000000000000000000000000000000000000000602082015250565b6000613fdd602b83613254565b9150613fe882613f81565b604082019050919050565b6000602082019050818103600083015261400c81613fd0565b9050919050565b60006060820190506140286000830186613363565b6140356020830185613572565b6140426040830184613572565b949350505050565b7f796f752063616e27742072656d6f76652066726f6d2073616c6520612073746160008201527f7220796f7520646f6e2774206f776e0000000000000000000000000000000000602082015250565b60006140a6602f83613254565b91506140b18261404a565b604082019050919050565b600060208201905081810360008301526140d581614099565b9050919050565b60006040820190506140f16000830185613363565b6140fe6020830184613572565b9392505050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000614161602983613254565b915061416c82614105565b604082019050919050565b6000602082019050818103600083015261419081614154565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b60006141f3602a83613254565b91506141fe82614197565b604082019050919050565b60006020820190508181036000830152614222816141e6565b9050919050565b7f7468652073746172206973206e6f7420757020666f722073616c650000000000600082015250565b600061425f601b83613254565b915061426a82614229565b602082019050919050565b6000602082019050818103600083015261428e81614252565b9050919050565b7f6e6f7420656e6f75676820657468657220746f2070757263686173652074686960008201527f7320737461720000000000000000000000000000000000000000000000000000602082015250565b60006142f1602683613254565b91506142fc82614295565b604082019050919050565b60006020820190508181036000830152614320816142e4565b9050919050565b600060608201905061433c6000830186613363565b6143496020830185613363565b6143566040830184613572565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006143988261314e565b91506143a38361314e565b9250828210156143b6576143b561435e565b5b828203905092915050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b600061441d602f83613254565b9150614428826143c1565b604082019050919050565b6000602082019050818103600083015261444c81614410565b9050919050565b600081905092915050565b600061446982613249565b6144738185614453565b9350614483818560208601613265565b80840191505092915050565b600061449b828561445e565b91506144a7828461445e565b91508190509392505050565b600080fd5b600080fd5b600080858511156144d1576144d06144b3565b5b838611156144e2576144e16144b8565b5b6001850283019150848603905094509492505050565b600082905092915050565b600082821b905092915050565b600061451c83836144f8565b826145278135613644565b92506002821015614567576145627fffff00000000000000000000000000000000000000000000000000000000000083600203600802614503565b831692505b505092915050565b7f726967687420617363656e73696f6e20686f75727320696e76616c6964000000600082015250565b60006145a5601d83613254565b91506145b08261456f565b602082019050919050565b600060208201905081810360008301526145d481614598565b9050919050565b7f726967687420617363656e73696f6e206d696e7574657320696e76616c696400600082015250565b6000614611601f83613254565b915061461c826145db565b602082019050919050565b6000602082019050818103600083015261464081614604565b9050919050565b600061465383836144f8565b8261465e813561367f565b9250600582101561469e576146997fffffffffff00000000000000000000000000000000000000000000000000000083600503600802614503565b831692505b505092915050565b7f726967687420617363656e73696f6e207365636f6e647320696e76616c696400600082015250565b60006146dc601f83613254565b91506146e7826146a6565b602082019050919050565b6000602082019050818103600083015261470b816146cf565b9050919050565b600061471e83836144f8565b8261472981356136ba565b92506003821015614769576147647fffffff000000000000000000000000000000000000000000000000000000000083600303600802614503565b831692505b505092915050565b7f6465636c696e6174696f6e206465677265657320696e76616c69640000000000600082015250565b60006147a7601b83613254565b91506147b282614771565b602082019050919050565b600060208201905081810360008301526147d68161479a565b9050919050565b7f6465636c696e6174696f6e20617263206d696e7574657320696e76616c696400600082015250565b6000614813601f83613254565b915061481e826147dd565b602082019050919050565b6000602082019050818103600083015261484281614806565b9050919050565b7f6465636c696e6174696f6e20617263207365636f6e647320696e76616c696400600082015250565b600061487f601f83613254565b915061488a82614849565b602082019050919050565b600060208201905081810360008301526148ae81614872565b9050919050565b60006148c183836144f8565b826148cc8135613948565b9250601382101561490c576149077fffffffffffffffffffffffffffffffffffffff0000000000000000000000000083601303600802614503565b831692505b505092915050565b7f7374617220636f6f7264696e61746520616c7265616479206578697374730000600082015250565b600061494a601e83613254565b915061495582614914565b602082019050919050565b600060208201905081810360008301526149798161493d565b9050919050565b600061498b8261314e565b91506149968361314e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156149cb576149ca61435e565b5b828201905092915050565b6149df81613948565b82525050565b60006080820190506149fa6000830188613363565b614a076020830187613572565b614a1460408301866149d6565b8181036060830152614a27818486613ccc565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff82169050919050565b6000614a7a82614a62565b9150614a8583614a62565b925082821015614a9857614a9761435e565b5b828203905092915050565b6000614aae82614a62565b915060ff821415614ac257614ac161435e565b5b600182019050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614b29602c83613254565b9150614b3482614acd565b604082019050919050565b60006020820190508181036000830152614b5881614b1c565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614bbb602583613254565b9150614bc682614b5f565b604082019050919050565b60006020820190508181036000830152614bea81614bae565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614c4d602483613254565b9150614c5882614bf1565b604082019050919050565b60006020820190508181036000830152614c7c81614c40565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614cb9601983613254565b9150614cc482614c83565b602082019050919050565b60006020820190508181036000830152614ce881614cac565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614d4b603283613254565b9150614d5682614cef565b604082019050919050565b60006020820190508181036000830152614d7a81614d3e565b9050919050565b6000614d8c8261314e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614dbf57614dbe61435e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614e048261314e565b9150614e0f8361314e565b925082614e1f57614e1e614dca565b5b828204905092915050565b6000614e358261314e565b9150614e408361314e565b925082614e5057614e4f614dca565b5b828206905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614e91602083613254565b9150614e9c82614e5b565b602082019050919050565b60006020820190508181036000830152614ec081614e84565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614efd601c83613254565b9150614f0882614ec7565b602082019050919050565b60006020820190508181036000830152614f2c81614ef0565b9050919050565b6000608082019050614f486000830187613363565b614f556020830186613363565b614f626040830185613572565b8181036060830152614f74818461360b565b905095945050505050565b600081519050614f8e816130bf565b92915050565b600060208284031215614faa57614fa9613089565b5b6000614fb884828501614f7f565b9150509291505056fea2646970667358221220fe931e2df30152a2927cc6dad8feaf186792ad3cffe5ed55ece21de3b53ee81464736f6c634300080b0033",
}

// StarnotaryABI is the input ABI used to generate the binding from.
// Deprecated: Use StarnotaryMetaData.ABI instead.
var StarnotaryABI = StarnotaryMetaData.ABI

// StarnotaryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StarnotaryMetaData.Bin instead.
var StarnotaryBin = StarnotaryMetaData.Bin

// DeployStarnotary deploys a new Ethereum contract, binding an instance of Starnotary to it.
func DeployStarnotary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Starnotary, error) {
	parsed, err := StarnotaryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StarnotaryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Starnotary{StarnotaryCaller: StarnotaryCaller{contract: contract}, StarnotaryTransactor: StarnotaryTransactor{contract: contract}, StarnotaryFilterer: StarnotaryFilterer{contract: contract}}, nil
}

// Starnotary is an auto generated Go binding around an Ethereum contract.
type Starnotary struct {
	StarnotaryCaller     // Read-only binding to the contract
	StarnotaryTransactor // Write-only binding to the contract
	StarnotaryFilterer   // Log filterer for contract events
}

// StarnotaryCaller is an auto generated read-only Go binding around an Ethereum contract.
type StarnotaryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StarnotaryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StarnotaryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StarnotaryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StarnotaryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StarnotarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StarnotarySession struct {
	Contract     *Starnotary       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StarnotaryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StarnotaryCallerSession struct {
	Contract *StarnotaryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// StarnotaryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StarnotaryTransactorSession struct {
	Contract     *StarnotaryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// StarnotaryRaw is an auto generated low-level Go binding around an Ethereum contract.
type StarnotaryRaw struct {
	Contract *Starnotary // Generic contract binding to access the raw methods on
}

// StarnotaryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StarnotaryCallerRaw struct {
	Contract *StarnotaryCaller // Generic read-only contract binding to access the raw methods on
}

// StarnotaryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StarnotaryTransactorRaw struct {
	Contract *StarnotaryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStarnotary creates a new instance of Starnotary, bound to a specific deployed contract.
func NewStarnotary(address common.Address, backend bind.ContractBackend) (*Starnotary, error) {
	contract, err := bindStarnotary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Starnotary{StarnotaryCaller: StarnotaryCaller{contract: contract}, StarnotaryTransactor: StarnotaryTransactor{contract: contract}, StarnotaryFilterer: StarnotaryFilterer{contract: contract}}, nil
}

// NewStarnotaryCaller creates a new read-only instance of Starnotary, bound to a specific deployed contract.
func NewStarnotaryCaller(address common.Address, caller bind.ContractCaller) (*StarnotaryCaller, error) {
	contract, err := bindStarnotary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StarnotaryCaller{contract: contract}, nil
}

// NewStarnotaryTransactor creates a new write-only instance of Starnotary, bound to a specific deployed contract.
func NewStarnotaryTransactor(address common.Address, transactor bind.ContractTransactor) (*StarnotaryTransactor, error) {
	contract, err := bindStarnotary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StarnotaryTransactor{contract: contract}, nil
}

// NewStarnotaryFilterer creates a new log filterer instance of Starnotary, bound to a specific deployed contract.
func NewStarnotaryFilterer(address common.Address, filterer bind.ContractFilterer) (*StarnotaryFilterer, error) {
	contract, err := bindStarnotary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StarnotaryFilterer{contract: contract}, nil
}

// bindStarnotary binds a generic wrapper to an already deployed contract.
func bindStarnotary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StarnotaryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Starnotary *StarnotaryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Starnotary.Contract.StarnotaryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Starnotary *StarnotaryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Starnotary.Contract.StarnotaryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Starnotary *StarnotaryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Starnotary.Contract.StarnotaryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Starnotary *StarnotaryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Starnotary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Starnotary *StarnotaryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Starnotary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Starnotary *StarnotaryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Starnotary.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Starnotary *StarnotaryCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Starnotary *StarnotarySession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Starnotary.Contract.BalanceOf(&_Starnotary.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Starnotary *StarnotaryCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Starnotary.Contract.BalanceOf(&_Starnotary.CallOpts, owner)
}

// CoordinatesToTokenId is a free data retrieval call binding the contract method 0xe48b3961.
//
// Solidity: function coordinatesToTokenId(bytes19 ) view returns(uint256)
func (_Starnotary *StarnotaryCaller) CoordinatesToTokenId(opts *bind.CallOpts, arg0 [19]byte) (*big.Int, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "coordinatesToTokenId", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CoordinatesToTokenId is a free data retrieval call binding the contract method 0xe48b3961.
//
// Solidity: function coordinatesToTokenId(bytes19 ) view returns(uint256)
func (_Starnotary *StarnotarySession) CoordinatesToTokenId(arg0 [19]byte) (*big.Int, error) {
	return _Starnotary.Contract.CoordinatesToTokenId(&_Starnotary.CallOpts, arg0)
}

// CoordinatesToTokenId is a free data retrieval call binding the contract method 0xe48b3961.
//
// Solidity: function coordinatesToTokenId(bytes19 ) view returns(uint256)
func (_Starnotary *StarnotaryCallerSession) CoordinatesToTokenId(arg0 [19]byte) (*big.Int, error) {
	return _Starnotary.Contract.CoordinatesToTokenId(&_Starnotary.CallOpts, arg0)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Starnotary *StarnotaryCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Starnotary *StarnotarySession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Starnotary.Contract.GetApproved(&_Starnotary.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Starnotary *StarnotaryCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Starnotary.Contract.GetApproved(&_Starnotary.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Starnotary *StarnotaryCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Starnotary *StarnotarySession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Starnotary.Contract.IsApprovedForAll(&_Starnotary.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Starnotary *StarnotaryCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Starnotary.Contract.IsApprovedForAll(&_Starnotary.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Starnotary *StarnotaryCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Starnotary *StarnotarySession) Name() (string, error) {
	return _Starnotary.Contract.Name(&_Starnotary.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Starnotary *StarnotaryCallerSession) Name() (string, error) {
	return _Starnotary.Contract.Name(&_Starnotary.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Starnotary *StarnotaryCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Starnotary *StarnotarySession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Starnotary.Contract.OwnerOf(&_Starnotary.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Starnotary *StarnotaryCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Starnotary.Contract.OwnerOf(&_Starnotary.CallOpts, tokenId)
}

// StarNameToTokenId is a free data retrieval call binding the contract method 0x1350601b.
//
// Solidity: function starNameToTokenId(bytes ) view returns(uint256)
func (_Starnotary *StarnotaryCaller) StarNameToTokenId(opts *bind.CallOpts, arg0 []byte) (*big.Int, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "starNameToTokenId", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StarNameToTokenId is a free data retrieval call binding the contract method 0x1350601b.
//
// Solidity: function starNameToTokenId(bytes ) view returns(uint256)
func (_Starnotary *StarnotarySession) StarNameToTokenId(arg0 []byte) (*big.Int, error) {
	return _Starnotary.Contract.StarNameToTokenId(&_Starnotary.CallOpts, arg0)
}

// StarNameToTokenId is a free data retrieval call binding the contract method 0x1350601b.
//
// Solidity: function starNameToTokenId(bytes ) view returns(uint256)
func (_Starnotary *StarnotaryCallerSession) StarNameToTokenId(arg0 []byte) (*big.Int, error) {
	return _Starnotary.Contract.StarNameToTokenId(&_Starnotary.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Starnotary *StarnotaryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Starnotary *StarnotarySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Starnotary.Contract.SupportsInterface(&_Starnotary.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Starnotary *StarnotaryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Starnotary.Contract.SupportsInterface(&_Starnotary.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Starnotary *StarnotaryCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Starnotary *StarnotarySession) Symbol() (string, error) {
	return _Starnotary.Contract.Symbol(&_Starnotary.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Starnotary *StarnotaryCallerSession) Symbol() (string, error) {
	return _Starnotary.Contract.Symbol(&_Starnotary.CallOpts)
}

// TokenIdToSalePrice is a free data retrieval call binding the contract method 0xcfa92af9.
//
// Solidity: function tokenIdToSalePrice(uint256 ) view returns(uint256)
func (_Starnotary *StarnotaryCaller) TokenIdToSalePrice(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "tokenIdToSalePrice", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenIdToSalePrice is a free data retrieval call binding the contract method 0xcfa92af9.
//
// Solidity: function tokenIdToSalePrice(uint256 ) view returns(uint256)
func (_Starnotary *StarnotarySession) TokenIdToSalePrice(arg0 *big.Int) (*big.Int, error) {
	return _Starnotary.Contract.TokenIdToSalePrice(&_Starnotary.CallOpts, arg0)
}

// TokenIdToSalePrice is a free data retrieval call binding the contract method 0xcfa92af9.
//
// Solidity: function tokenIdToSalePrice(uint256 ) view returns(uint256)
func (_Starnotary *StarnotaryCallerSession) TokenIdToSalePrice(arg0 *big.Int) (*big.Int, error) {
	return _Starnotary.Contract.TokenIdToSalePrice(&_Starnotary.CallOpts, arg0)
}

// TokenIdToStar is a free data retrieval call binding the contract method 0x267d9ae1.
//
// Solidity: function tokenIdToStar(uint256 ) view returns(bytes name, bytes2 RAHours, bytes2 RAMinutes, bytes5 RASeconds, bytes3 decDegrees, bytes2 decArcMinutes, bytes5 decArcSeconds)
func (_Starnotary *StarnotaryCaller) TokenIdToStar(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Name          []byte
	RAHours       [2]byte
	RAMinutes     [2]byte
	RASeconds     [5]byte
	DecDegrees    [3]byte
	DecArcMinutes [2]byte
	DecArcSeconds [5]byte
}, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "tokenIdToStar", arg0)

	outstruct := new(struct {
		Name          []byte
		RAHours       [2]byte
		RAMinutes     [2]byte
		RASeconds     [5]byte
		DecDegrees    [3]byte
		DecArcMinutes [2]byte
		DecArcSeconds [5]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.RAHours = *abi.ConvertType(out[1], new([2]byte)).(*[2]byte)
	outstruct.RAMinutes = *abi.ConvertType(out[2], new([2]byte)).(*[2]byte)
	outstruct.RASeconds = *abi.ConvertType(out[3], new([5]byte)).(*[5]byte)
	outstruct.DecDegrees = *abi.ConvertType(out[4], new([3]byte)).(*[3]byte)
	outstruct.DecArcMinutes = *abi.ConvertType(out[5], new([2]byte)).(*[2]byte)
	outstruct.DecArcSeconds = *abi.ConvertType(out[6], new([5]byte)).(*[5]byte)

	return *outstruct, err

}

// TokenIdToStar is a free data retrieval call binding the contract method 0x267d9ae1.
//
// Solidity: function tokenIdToStar(uint256 ) view returns(bytes name, bytes2 RAHours, bytes2 RAMinutes, bytes5 RASeconds, bytes3 decDegrees, bytes2 decArcMinutes, bytes5 decArcSeconds)
func (_Starnotary *StarnotarySession) TokenIdToStar(arg0 *big.Int) (struct {
	Name          []byte
	RAHours       [2]byte
	RAMinutes     [2]byte
	RASeconds     [5]byte
	DecDegrees    [3]byte
	DecArcMinutes [2]byte
	DecArcSeconds [5]byte
}, error) {
	return _Starnotary.Contract.TokenIdToStar(&_Starnotary.CallOpts, arg0)
}

// TokenIdToStar is a free data retrieval call binding the contract method 0x267d9ae1.
//
// Solidity: function tokenIdToStar(uint256 ) view returns(bytes name, bytes2 RAHours, bytes2 RAMinutes, bytes5 RASeconds, bytes3 decDegrees, bytes2 decArcMinutes, bytes5 decArcSeconds)
func (_Starnotary *StarnotaryCallerSession) TokenIdToStar(arg0 *big.Int) (struct {
	Name          []byte
	RAHours       [2]byte
	RAMinutes     [2]byte
	RASeconds     [5]byte
	DecDegrees    [3]byte
	DecArcMinutes [2]byte
	DecArcSeconds [5]byte
}, error) {
	return _Starnotary.Contract.TokenIdToStar(&_Starnotary.CallOpts, arg0)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Starnotary *StarnotaryCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Starnotary *StarnotarySession) TokenURI(tokenId *big.Int) (string, error) {
	return _Starnotary.Contract.TokenURI(&_Starnotary.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Starnotary *StarnotaryCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Starnotary.Contract.TokenURI(&_Starnotary.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Starnotary *StarnotaryCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Starnotary *StarnotarySession) TotalSupply() (*big.Int, error) {
	return _Starnotary.Contract.TotalSupply(&_Starnotary.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Starnotary *StarnotaryCallerSession) TotalSupply() (*big.Int, error) {
	return _Starnotary.Contract.TotalSupply(&_Starnotary.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Starnotary *StarnotaryTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Starnotary *StarnotarySession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.Approve(&_Starnotary.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Starnotary *StarnotaryTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.Approve(&_Starnotary.TransactOpts, to, tokenId)
}

// ChangeStarName is a paid mutator transaction binding the contract method 0x04a4a48c.
//
// Solidity: function changeStarName(uint256 _tokenId, bytes _name) returns()
func (_Starnotary *StarnotaryTransactor) ChangeStarName(opts *bind.TransactOpts, _tokenId *big.Int, _name []byte) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "changeStarName", _tokenId, _name)
}

// ChangeStarName is a paid mutator transaction binding the contract method 0x04a4a48c.
//
// Solidity: function changeStarName(uint256 _tokenId, bytes _name) returns()
func (_Starnotary *StarnotarySession) ChangeStarName(_tokenId *big.Int, _name []byte) (*types.Transaction, error) {
	return _Starnotary.Contract.ChangeStarName(&_Starnotary.TransactOpts, _tokenId, _name)
}

// ChangeStarName is a paid mutator transaction binding the contract method 0x04a4a48c.
//
// Solidity: function changeStarName(uint256 _tokenId, bytes _name) returns()
func (_Starnotary *StarnotaryTransactorSession) ChangeStarName(_tokenId *big.Int, _name []byte) (*types.Transaction, error) {
	return _Starnotary.Contract.ChangeStarName(&_Starnotary.TransactOpts, _tokenId, _name)
}

// CreateStar is a paid mutator transaction binding the contract method 0xe0cc0cfb.
//
// Solidity: function createStar(bytes _name, bytes _coordinates) returns()
func (_Starnotary *StarnotaryTransactor) CreateStar(opts *bind.TransactOpts, _name []byte, _coordinates []byte) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "createStar", _name, _coordinates)
}

// CreateStar is a paid mutator transaction binding the contract method 0xe0cc0cfb.
//
// Solidity: function createStar(bytes _name, bytes _coordinates) returns()
func (_Starnotary *StarnotarySession) CreateStar(_name []byte, _coordinates []byte) (*types.Transaction, error) {
	return _Starnotary.Contract.CreateStar(&_Starnotary.TransactOpts, _name, _coordinates)
}

// CreateStar is a paid mutator transaction binding the contract method 0xe0cc0cfb.
//
// Solidity: function createStar(bytes _name, bytes _coordinates) returns()
func (_Starnotary *StarnotaryTransactorSession) CreateStar(_name []byte, _coordinates []byte) (*types.Transaction, error) {
	return _Starnotary.Contract.CreateStar(&_Starnotary.TransactOpts, _name, _coordinates)
}

// PurchaseStar is a paid mutator transaction binding the contract method 0x9369394b.
//
// Solidity: function purchaseStar(uint256 _tokenId) payable returns()
func (_Starnotary *StarnotaryTransactor) PurchaseStar(opts *bind.TransactOpts, _tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "purchaseStar", _tokenId)
}

// PurchaseStar is a paid mutator transaction binding the contract method 0x9369394b.
//
// Solidity: function purchaseStar(uint256 _tokenId) payable returns()
func (_Starnotary *StarnotarySession) PurchaseStar(_tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.PurchaseStar(&_Starnotary.TransactOpts, _tokenId)
}

// PurchaseStar is a paid mutator transaction binding the contract method 0x9369394b.
//
// Solidity: function purchaseStar(uint256 _tokenId) payable returns()
func (_Starnotary *StarnotaryTransactorSession) PurchaseStar(_tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.PurchaseStar(&_Starnotary.TransactOpts, _tokenId)
}

// PutStarUpForSale is a paid mutator transaction binding the contract method 0x316a4361.
//
// Solidity: function putStarUpForSale(uint256 _tokenId, uint256 _price) returns()
func (_Starnotary *StarnotaryTransactor) PutStarUpForSale(opts *bind.TransactOpts, _tokenId *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "putStarUpForSale", _tokenId, _price)
}

// PutStarUpForSale is a paid mutator transaction binding the contract method 0x316a4361.
//
// Solidity: function putStarUpForSale(uint256 _tokenId, uint256 _price) returns()
func (_Starnotary *StarnotarySession) PutStarUpForSale(_tokenId *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.PutStarUpForSale(&_Starnotary.TransactOpts, _tokenId, _price)
}

// PutStarUpForSale is a paid mutator transaction binding the contract method 0x316a4361.
//
// Solidity: function putStarUpForSale(uint256 _tokenId, uint256 _price) returns()
func (_Starnotary *StarnotaryTransactorSession) PutStarUpForSale(_tokenId *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.PutStarUpForSale(&_Starnotary.TransactOpts, _tokenId, _price)
}

// RemoveStarFromSale is a paid mutator transaction binding the contract method 0x481d49e1.
//
// Solidity: function removeStarFromSale(uint256 _tokenId) returns()
func (_Starnotary *StarnotaryTransactor) RemoveStarFromSale(opts *bind.TransactOpts, _tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "removeStarFromSale", _tokenId)
}

// RemoveStarFromSale is a paid mutator transaction binding the contract method 0x481d49e1.
//
// Solidity: function removeStarFromSale(uint256 _tokenId) returns()
func (_Starnotary *StarnotarySession) RemoveStarFromSale(_tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.RemoveStarFromSale(&_Starnotary.TransactOpts, _tokenId)
}

// RemoveStarFromSale is a paid mutator transaction binding the contract method 0x481d49e1.
//
// Solidity: function removeStarFromSale(uint256 _tokenId) returns()
func (_Starnotary *StarnotaryTransactorSession) RemoveStarFromSale(_tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.RemoveStarFromSale(&_Starnotary.TransactOpts, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Starnotary *StarnotaryTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Starnotary *StarnotarySession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.SafeTransferFrom(&_Starnotary.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Starnotary *StarnotaryTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.SafeTransferFrom(&_Starnotary.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Starnotary *StarnotaryTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Starnotary *StarnotarySession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Starnotary.Contract.SafeTransferFrom0(&_Starnotary.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Starnotary *StarnotaryTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Starnotary.Contract.SafeTransferFrom0(&_Starnotary.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Starnotary *StarnotaryTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Starnotary *StarnotarySession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Starnotary.Contract.SetApprovalForAll(&_Starnotary.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Starnotary *StarnotaryTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Starnotary.Contract.SetApprovalForAll(&_Starnotary.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Starnotary *StarnotaryTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Starnotary *StarnotarySession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.TransferFrom(&_Starnotary.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Starnotary *StarnotaryTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.TransferFrom(&_Starnotary.TransactOpts, from, to, tokenId)
}

// StarnotaryApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Starnotary contract.
type StarnotaryApprovalIterator struct {
	Event *StarnotaryApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryApproval represents a Approval event raised by the Starnotary contract.
type StarnotaryApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Starnotary *StarnotaryFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*StarnotaryApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StarnotaryApprovalIterator{contract: _Starnotary.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Starnotary *StarnotaryFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *StarnotaryApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryApproval)
				if err := _Starnotary.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Starnotary *StarnotaryFilterer) ParseApproval(log types.Log) (*StarnotaryApproval, error) {
	event := new(StarnotaryApproval)
	if err := _Starnotary.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Starnotary contract.
type StarnotaryApprovalForAllIterator struct {
	Event *StarnotaryApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryApprovalForAll represents a ApprovalForAll event raised by the Starnotary contract.
type StarnotaryApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Starnotary *StarnotaryFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*StarnotaryApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &StarnotaryApprovalForAllIterator{contract: _Starnotary.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Starnotary *StarnotaryFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *StarnotaryApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryApprovalForAll)
				if err := _Starnotary.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Starnotary *StarnotaryFilterer) ParseApprovalForAll(log types.Log) (*StarnotaryApprovalForAll, error) {
	event := new(StarnotaryApprovalForAll)
	if err := _Starnotary.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryChangeNameIterator is returned from FilterChangeName and is used to iterate over the raw logs and unpacked data for ChangeName events raised by the Starnotary contract.
type StarnotaryChangeNameIterator struct {
	Event *StarnotaryChangeName // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryChangeNameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryChangeName)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryChangeName)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryChangeNameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryChangeNameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryChangeName represents a ChangeName event raised by the Starnotary contract.
type StarnotaryChangeName struct {
	Owner   common.Address
	TokenId *big.Int
	NewName []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterChangeName is a free log retrieval operation binding the contract event 0xf744b02e2965631679dba1d6ccc015286348dc6452ab377764b9bce7c65aec0c.
//
// Solidity: event ChangeName(address owner, uint256 tokenId, bytes newName)
func (_Starnotary *StarnotaryFilterer) FilterChangeName(opts *bind.FilterOpts) (*StarnotaryChangeNameIterator, error) {

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "ChangeName")
	if err != nil {
		return nil, err
	}
	return &StarnotaryChangeNameIterator{contract: _Starnotary.contract, event: "ChangeName", logs: logs, sub: sub}, nil
}

// WatchChangeName is a free log subscription operation binding the contract event 0xf744b02e2965631679dba1d6ccc015286348dc6452ab377764b9bce7c65aec0c.
//
// Solidity: event ChangeName(address owner, uint256 tokenId, bytes newName)
func (_Starnotary *StarnotaryFilterer) WatchChangeName(opts *bind.WatchOpts, sink chan<- *StarnotaryChangeName) (event.Subscription, error) {

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "ChangeName")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryChangeName)
				if err := _Starnotary.contract.UnpackLog(event, "ChangeName", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangeName is a log parse operation binding the contract event 0xf744b02e2965631679dba1d6ccc015286348dc6452ab377764b9bce7c65aec0c.
//
// Solidity: event ChangeName(address owner, uint256 tokenId, bytes newName)
func (_Starnotary *StarnotaryFilterer) ParseChangeName(log types.Log) (*StarnotaryChangeName, error) {
	event := new(StarnotaryChangeName)
	if err := _Starnotary.contract.UnpackLog(event, "ChangeName", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryCreateIterator is returned from FilterCreate and is used to iterate over the raw logs and unpacked data for Create events raised by the Starnotary contract.
type StarnotaryCreateIterator struct {
	Event *StarnotaryCreate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryCreateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryCreate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryCreate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryCreateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryCreateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryCreate represents a Create event raised by the Starnotary contract.
type StarnotaryCreate struct {
	Owner       common.Address
	TokenId     *big.Int
	Coordinates [19]byte
	Name        []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCreate is a free log retrieval operation binding the contract event 0x645f015284b54bc389e86c58c9e6fa711dabfe2a1fd7d7fdf9440458b0074587.
//
// Solidity: event Create(address owner, uint256 tokenId, bytes19 coordinates, bytes name)
func (_Starnotary *StarnotaryFilterer) FilterCreate(opts *bind.FilterOpts) (*StarnotaryCreateIterator, error) {

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "Create")
	if err != nil {
		return nil, err
	}
	return &StarnotaryCreateIterator{contract: _Starnotary.contract, event: "Create", logs: logs, sub: sub}, nil
}

// WatchCreate is a free log subscription operation binding the contract event 0x645f015284b54bc389e86c58c9e6fa711dabfe2a1fd7d7fdf9440458b0074587.
//
// Solidity: event Create(address owner, uint256 tokenId, bytes19 coordinates, bytes name)
func (_Starnotary *StarnotaryFilterer) WatchCreate(opts *bind.WatchOpts, sink chan<- *StarnotaryCreate) (event.Subscription, error) {

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "Create")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryCreate)
				if err := _Starnotary.contract.UnpackLog(event, "Create", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreate is a log parse operation binding the contract event 0x645f015284b54bc389e86c58c9e6fa711dabfe2a1fd7d7fdf9440458b0074587.
//
// Solidity: event Create(address owner, uint256 tokenId, bytes19 coordinates, bytes name)
func (_Starnotary *StarnotaryFilterer) ParseCreate(log types.Log) (*StarnotaryCreate, error) {
	event := new(StarnotaryCreate)
	if err := _Starnotary.contract.UnpackLog(event, "Create", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryPurchaseIterator is returned from FilterPurchase and is used to iterate over the raw logs and unpacked data for Purchase events raised by the Starnotary contract.
type StarnotaryPurchaseIterator struct {
	Event *StarnotaryPurchase // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryPurchaseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryPurchase)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryPurchase)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryPurchaseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryPurchaseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryPurchase represents a Purchase event raised by the Starnotary contract.
type StarnotaryPurchase struct {
	NewOwner common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterPurchase is a free log retrieval operation binding the contract event 0x2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632.
//
// Solidity: event Purchase(address newOwner, uint256 tokenId)
func (_Starnotary *StarnotaryFilterer) FilterPurchase(opts *bind.FilterOpts) (*StarnotaryPurchaseIterator, error) {

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "Purchase")
	if err != nil {
		return nil, err
	}
	return &StarnotaryPurchaseIterator{contract: _Starnotary.contract, event: "Purchase", logs: logs, sub: sub}, nil
}

// WatchPurchase is a free log subscription operation binding the contract event 0x2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632.
//
// Solidity: event Purchase(address newOwner, uint256 tokenId)
func (_Starnotary *StarnotaryFilterer) WatchPurchase(opts *bind.WatchOpts, sink chan<- *StarnotaryPurchase) (event.Subscription, error) {

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "Purchase")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryPurchase)
				if err := _Starnotary.contract.UnpackLog(event, "Purchase", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePurchase is a log parse operation binding the contract event 0x2499a5330ab0979cc612135e7883ebc3cd5c9f7a8508f042540c34723348f632.
//
// Solidity: event Purchase(address newOwner, uint256 tokenId)
func (_Starnotary *StarnotaryFilterer) ParsePurchase(log types.Log) (*StarnotaryPurchase, error) {
	event := new(StarnotaryPurchase)
	if err := _Starnotary.contract.UnpackLog(event, "Purchase", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryPutForSaleIterator is returned from FilterPutForSale and is used to iterate over the raw logs and unpacked data for PutForSale events raised by the Starnotary contract.
type StarnotaryPutForSaleIterator struct {
	Event *StarnotaryPutForSale // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryPutForSaleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryPutForSale)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryPutForSale)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryPutForSaleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryPutForSaleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryPutForSale represents a PutForSale event raised by the Starnotary contract.
type StarnotaryPutForSale struct {
	Owner      common.Address
	TokenId    *big.Int
	PriceInWei *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPutForSale is a free log retrieval operation binding the contract event 0xeef8701c784dcc5b12eb5ce2687a9e42d1d94b6e81f660dcb84b51554c37f082.
//
// Solidity: event PutForSale(address owner, uint256 tokenId, uint256 priceInWei)
func (_Starnotary *StarnotaryFilterer) FilterPutForSale(opts *bind.FilterOpts) (*StarnotaryPutForSaleIterator, error) {

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "PutForSale")
	if err != nil {
		return nil, err
	}
	return &StarnotaryPutForSaleIterator{contract: _Starnotary.contract, event: "PutForSale", logs: logs, sub: sub}, nil
}

// WatchPutForSale is a free log subscription operation binding the contract event 0xeef8701c784dcc5b12eb5ce2687a9e42d1d94b6e81f660dcb84b51554c37f082.
//
// Solidity: event PutForSale(address owner, uint256 tokenId, uint256 priceInWei)
func (_Starnotary *StarnotaryFilterer) WatchPutForSale(opts *bind.WatchOpts, sink chan<- *StarnotaryPutForSale) (event.Subscription, error) {

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "PutForSale")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryPutForSale)
				if err := _Starnotary.contract.UnpackLog(event, "PutForSale", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePutForSale is a log parse operation binding the contract event 0xeef8701c784dcc5b12eb5ce2687a9e42d1d94b6e81f660dcb84b51554c37f082.
//
// Solidity: event PutForSale(address owner, uint256 tokenId, uint256 priceInWei)
func (_Starnotary *StarnotaryFilterer) ParsePutForSale(log types.Log) (*StarnotaryPutForSale, error) {
	event := new(StarnotaryPutForSale)
	if err := _Starnotary.contract.UnpackLog(event, "PutForSale", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryRemoveFromSaleIterator is returned from FilterRemoveFromSale and is used to iterate over the raw logs and unpacked data for RemoveFromSale events raised by the Starnotary contract.
type StarnotaryRemoveFromSaleIterator struct {
	Event *StarnotaryRemoveFromSale // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryRemoveFromSaleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryRemoveFromSale)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryRemoveFromSale)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryRemoveFromSaleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryRemoveFromSaleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryRemoveFromSale represents a RemoveFromSale event raised by the Starnotary contract.
type StarnotaryRemoveFromSale struct {
	Owner   common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRemoveFromSale is a free log retrieval operation binding the contract event 0xbfbf7e7677a0c423106146f1ee86ac042526b53581de06ba54c51e8acfeac746.
//
// Solidity: event RemoveFromSale(address owner, uint256 tokenId)
func (_Starnotary *StarnotaryFilterer) FilterRemoveFromSale(opts *bind.FilterOpts) (*StarnotaryRemoveFromSaleIterator, error) {

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "RemoveFromSale")
	if err != nil {
		return nil, err
	}
	return &StarnotaryRemoveFromSaleIterator{contract: _Starnotary.contract, event: "RemoveFromSale", logs: logs, sub: sub}, nil
}

// WatchRemoveFromSale is a free log subscription operation binding the contract event 0xbfbf7e7677a0c423106146f1ee86ac042526b53581de06ba54c51e8acfeac746.
//
// Solidity: event RemoveFromSale(address owner, uint256 tokenId)
func (_Starnotary *StarnotaryFilterer) WatchRemoveFromSale(opts *bind.WatchOpts, sink chan<- *StarnotaryRemoveFromSale) (event.Subscription, error) {

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "RemoveFromSale")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryRemoveFromSale)
				if err := _Starnotary.contract.UnpackLog(event, "RemoveFromSale", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveFromSale is a log parse operation binding the contract event 0xbfbf7e7677a0c423106146f1ee86ac042526b53581de06ba54c51e8acfeac746.
//
// Solidity: event RemoveFromSale(address owner, uint256 tokenId)
func (_Starnotary *StarnotaryFilterer) ParseRemoveFromSale(log types.Log) (*StarnotaryRemoveFromSale, error) {
	event := new(StarnotaryRemoveFromSale)
	if err := _Starnotary.contract.UnpackLog(event, "RemoveFromSale", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Starnotary contract.
type StarnotaryTransferIterator struct {
	Event *StarnotaryTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryTransfer represents a Transfer event raised by the Starnotary contract.
type StarnotaryTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Starnotary *StarnotaryFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*StarnotaryTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StarnotaryTransferIterator{contract: _Starnotary.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Starnotary *StarnotaryFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *StarnotaryTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryTransfer)
				if err := _Starnotary.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Starnotary *StarnotaryFilterer) ParseTransfer(log types.Log) (*StarnotaryTransfer, error) {
	event := new(StarnotaryTransfer)
	if err := _Starnotary.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
