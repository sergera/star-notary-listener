// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package starnotary

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StarnotaryMetaData contains all meta data concerning the Starnotary contract.
var StarnotaryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newName\",\"type\":\"bytes\"}],\"name\":\"ChangedName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes19\",\"name\":\"coordinates\",\"type\":\"bytes19\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"PutForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RemovedFromSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyStar\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_name\",\"type\":\"bytes\"}],\"name\":\"changeStarName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes19\",\"name\":\"\",\"type\":\"bytes19\"}],\"name\":\"coordinatesToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_coordinates\",\"type\":\"bytes\"}],\"name\":\"createStar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"putStarUpForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeStarFromSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"starNameToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToStar\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes2\",\"name\":\"RAHours\",\"type\":\"bytes2\"},{\"internalType\":\"bytes2\",\"name\":\"RAMinutes\",\"type\":\"bytes2\"},{\"internalType\":\"bytes5\",\"name\":\"RASeconds\",\"type\":\"bytes5\"},{\"internalType\":\"bytes3\",\"name\":\"decDegrees\",\"type\":\"bytes3\"},{\"internalType\":\"bytes2\",\"name\":\"decArcMinutes\",\"type\":\"bytes2\"},{\"internalType\":\"bytes5\",\"name\":\"decArcSeconds\",\"type\":\"bytes5\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600481526020017f53746172000000000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f5354415200000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000b8565b508060019080519060200190620000af929190620000b8565b505050620001cd565b828054620000c69062000197565b90600052602060002090601f016020900481019282620000ea576000855562000136565b82601f106200010557805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013557825182559160200191906001019062000118565b5b50905062000145919062000149565b5090565b5b80821115620001645760008160009055506001016200014a565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001b057607f821691505b60208210811415620001c757620001c662000168565b5b50919050565b61514a80620001dd6000396000f3fe60806040526004361061014b5760003560e01c8063481d49e1116100b6578063b88d4fde1161006f578063b88d4fde146104ab578063c87b56dd146104d4578063cfa92af914610511578063e0cc0cfb1461054e578063e48b396114610577578063e985e9c5146105b45761014b565b8063481d49e1146103895780636352211e146103b257806370a08231146103ef578063714cff561461042c57806395d89b4114610457578063a22cb465146104825761014b565b806318160ddd1161010857806318160ddd1461028457806323b872dd146102af578063267d9ae1146102d85780632f1c34ef1461031b578063316a43611461033757806342842e0e146103605761014b565b806301ffc9a71461015057806304a4a48c1461018d57806306fdde03146101b6578063081812fc146101e1578063095ea7b31461021e5780631350601b14610247575b600080fd5b34801561015c57600080fd5b506101776004803603810190610172919061317a565b6105f1565b60405161018491906131c2565b60405180910390f35b34801561019957600080fd5b506101b460048036038101906101af9190613278565b6106d3565b005b3480156101c257600080fd5b506101cb6108b7565b6040516101d89190613371565b60405180910390f35b3480156101ed57600080fd5b5061020860048036038101906102039190613393565b610949565b6040516102159190613401565b60405180910390f35b34801561022a57600080fd5b5061024560048036038101906102409190613448565b6109ce565b005b34801561025357600080fd5b5061026e600480360381019061026991906135b8565b610ae6565b60405161027b9190613610565b60405180910390f35b34801561029057600080fd5b50610299610b14565b6040516102a69190613610565b60405180910390f35b3480156102bb57600080fd5b506102d660048036038101906102d1919061362b565b610b21565b005b3480156102e457600080fd5b506102ff60048036038101906102fa9190613393565b610b81565b6040516103129796959493929190613784565b60405180910390f35b61033560048036038101906103309190613393565b610c99565b005b34801561034357600080fd5b5061035e600480360381019061035991906137fa565b610ea6565b005b34801561036c57600080fd5b506103876004803603810190610382919061362b565b610f7b565b005b34801561039557600080fd5b506103b060048036038101906103ab9190613393565b610f9b565b005b3480156103be57600080fd5b506103d960048036038101906103d49190613393565b61106d565b6040516103e69190613401565b60405180910390f35b3480156103fb57600080fd5b506104166004803603810190610411919061383a565b61111f565b6040516104239190613610565b60405180910390f35b34801561043857600080fd5b506104416111d7565b60405161044e9190613925565b60405180910390f35b34801561046357600080fd5b5061046c61122f565b6040516104799190613371565b60405180910390f35b34801561048e57600080fd5b506104a960048036038101906104a49190613973565b6112c1565b005b3480156104b757600080fd5b506104d260048036038101906104cd91906139b3565b6112d7565b005b3480156104e057600080fd5b506104fb60048036038101906104f69190613393565b611339565b6040516105089190613371565b60405180910390f35b34801561051d57600080fd5b5061053860048036038101906105339190613393565b6113e0565b6040516105459190613610565b60405180910390f35b34801561055a57600080fd5b5061057560048036038101906105709190613a36565b6113f8565b005b34801561058357600080fd5b5061059e60048036038101906105999190613b0f565b611b86565b6040516105ab9190613610565b60405180910390f35b3480156105c057600080fd5b506105db60048036038101906105d69190613b3c565b611b9e565b6040516105e891906131c2565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106bc57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106cc57506106cb82611c32565b5b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff166106f38461106d565b73ffffffffffffffffffffffffffffffffffffffff1614610749576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074090613bee565b60405180910390fd5b6107538282611c9c565b610792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078990613c5a565b60405180910390fd5b6000600983836040516107a6929190613caa565b908152602001604051809103902054146107f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ec90613d0f565b60405180910390fd5b60096006600085815260200190815260200160002060000160405161081a9190613e24565b9081526020016040518091039020600090558181600660008681526020019081526020016000206000019190610851929190612fe5565b508260098383604051610865929190613caa565b9081526020016040518091039020819055507fdcf3e79b7e2fc5e0048b93f601737c62d3f1aa0e18679c5752762472ebc6e44d8383836040516108aa93929190613e68565b60405180910390a1505050565b6060600080546108c690613d5e565b80601f01602080910402602001604051908101604052809291908181526020018280546108f290613d5e565b801561093f5780601f106109145761010080835404028352916020019161093f565b820191906000526020600020905b81548152906001019060200180831161092257829003601f168201915b5050505050905090565b600061095482611e1b565b610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098a90613f0c565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006109d98261106d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4190613f9e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610a69611e87565b73ffffffffffffffffffffffffffffffffffffffff161480610a985750610a9781610a92611e87565b611b9e565b5b610ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ace90614030565b60405180910390fd5b610ae18383611e8f565b505050565b6009818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000600a80549050905090565b610b32610b2c611e87565b82611f48565b610b71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b68906140c2565b60405180910390fd5b610b7c838383612026565b505050565b6006602052806000526040600020600091509050806000018054610ba490613d5e565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd090613d5e565b8015610c1d5780601f10610bf257610100808354040283529160200191610c1d565b820191906000526020600020905b815481529060010190602001808311610c0057829003601f168201915b5050505050908060010160009054906101000a900460f01b908060010160029054906101000a900460f01b908060010160049054906101000a900460d81b908060010160099054906101000a900460e81b9080600101600c9054906101000a900460f01b9080600101600e9054906101000a900460d81b905087565b6000600760008381526020019081526020016000205411610cef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce69061412e565b60405180910390fd5b6000600760008381526020019081526020016000205490506000610d128361106d565b905081341015610d57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4e906141c0565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff166323b872dd8233866040518463ffffffff1660e01b8152600401610d94939291906141e0565b600060405180830381600087803b158015610dae57600080fd5b505af1158015610dc2573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610e0c573d6000803e3d6000fd5b5081341115610e68573373ffffffffffffffffffffffffffffffffffffffff166108fc8334610e3b9190614246565b9081150290604051600060405180830381858888f19350505050158015610e66573d6000803e3d6000fd5b505b7fc54c8cc1c7525b424ec71b685c00d9355581a280488018c22005332ceb2fd4068333604051610e9992919061427a565b60405180910390a1505050565b3373ffffffffffffffffffffffffffffffffffffffff16610ec68361106d565b73ffffffffffffffffffffffffffffffffffffffff1614610f1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1390614315565b60405180910390fd5b610f2630836109ce565b8060076000848152602001908152602001600020819055507fff0b5cba073786b65e428a5466e81a88d5d7ad466738a382bfe518e0b6af13988282604051610f6f929190614335565b60405180910390a15050565b610f96838383604051806020016040528060008152506112d7565b505050565b3373ffffffffffffffffffffffffffffffffffffffff16610fbb8261106d565b73ffffffffffffffffffffffffffffffffffffffff1614611011576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611008906143d0565b60405180910390fd5b61101c6000826109ce565b60076000828152602001908152602001600020600090557fc76903a01f28be0672203520b5bfb2cbb1e8df8c65020891d4a9cff0df01374d816040516110629190613610565b60405180910390a150565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110d90614462565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611190576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611187906144f4565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600a80548060200260200160405190810160405280929190818152602001828054801561122557602002820191906000526020600020905b815481526020019060010190808311611211575b5050505050905090565b60606001805461123e90613d5e565b80601f016020809104026020016040519081016040528092919081815260200182805461126a90613d5e565b80156112b75780601f1061128c576101008083540402835291602001916112b7565b820191906000526020600020905b81548152906001019060200180831161129a57829003601f168201915b5050505050905090565b6112d36112cc611e87565b838361228d565b5050565b6112e86112e2611e87565b83611f48565b611327576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131e906140c2565b60405180910390fd5b611333848484846123fa565b50505050565b606061134482611e1b565b611383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137a90614586565b60405180910390fd5b600061138d612456565b905060008151116113ad57604051806020016040528060008152506113d8565b806113b78461246d565b6040516020016113c89291906145e2565b6040516020818303038152906040525b915050919050565b60076020528060005260406000206000915090505481565b6114028484611c9c565b611441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143890613c5a565b60405180910390fd5b600060098585604051611455929190613caa565b908152602001604051809103902054146114a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149b90613d0f565b60405180910390fd5b6114cb82826000906002926114bb93929190614610565b906114c69190614663565b6125ce565b61150a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115019061470e565b60405180910390fd5b611531828260029060049261152193929190614610565b9061152c9190614663565b6126cb565b611570576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115679061477a565b60405180910390fd5b611597828260049060099261158793929190614610565b90611592919061479a565b6127c8565b6115d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cd90614845565b60405180910390fd5b6115fd8282600990600c926115ed93929190614610565b906115f89190614865565b61294c565b61163c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163390614910565b60405180910390fd5b6116638282600c90600e9261165393929190614610565b9061165e9190614663565b6126cb565b6116a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116999061497c565b60405180910390fd5b6116c98282600e906013926116b993929190614610565b906116c4919061479a565b6127c8565b611708576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ff906149e8565b60405180910390fd5b60006008600084849061171b9190614a08565b6cffffffffffffffffffffffffff19166cffffffffffffffffffffffffff19168152602001908152602001600020541461178a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178190614ab3565b60405180910390fd5b60006040518060e0016040528086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200184846000906002926117f593929190614610565b906118009190614663565b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001848460029060049261183a93929190614610565b906118459190614663565b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001848460049060099261187f93929190614610565b9061188a919061479a565b7affffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018484600990600c926118c193929190614610565b906118cc9190614865565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018484600c90600e9261190593929190614610565b906119109190614663565b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020018484600e9060139261194a93929190614610565b90611955919061479a565b7affffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250905060006001611984610b14565b61198e9190614ad3565b905080600860008686906119a29190614a08565b6cffffffffffffffffffffffffff19166cffffffffffffffffffffffffff191681526020019081526020016000208190555080600987876040516119e7929190613caa565b908152602001604051809103902081905550600a81908060018154018082558091505060019003906000526020600020016000909190919091505581600660008381526020019081526020016000206000820151816000019080519060200190611a5292919061306b565b5060208201518160010160006101000a81548161ffff021916908360f01c021790555060408201518160010160026101000a81548161ffff021916908360f01c021790555060608201518160010160046101000a81548164ffffffffff021916908360d81c021790555060808201518160010160096101000a81548162ffffff021916908360e81c021790555060a082015181600101600c6101000a81548161ffff021916908360f01c021790555060c082015181600101600e6101000a81548164ffffffffff021916908360d81c0217905550905050611b333382612a76565b7fc6c75e3dff0d786834a52d041dd27162b7b18821da7d44f32eda867409aff50b3382868690611b639190614a08565b8989604051611b76959493929190614b38565b60405180910390a1505050505050565b60086020528060005260406000206000915090505481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006020838390501115611cb35760009050611e15565b6004838390501015611cc85760009050611e15565b611cee83836000818110611cdf57611cde614b86565b5b9050013560f81c60f81b612c50565b15611cfc5760009050611e15565b60008060008060005b878790508160ff161015611de45787878260ff16818110611d2957611d28614b86565b5b9050013560f81c60f81b9450611d3e85612c92565b9350611d4985612c50565b925083158015611d57575082155b15611d6a57600095505050505050611e15565b60008160ff161115611dc757828015611db35750611db28888600184611d909190614bc2565b60ff16818110611da357611da2614b86565b5b9050013560f81c60f81b612c50565b5b15611dc657600095505050505050611e15565b5b8315611dd1578091505b8080611ddc90614bf6565b915050611d05565b50600187879050611df59190614246565b8160ff161015611e0c576000945050505050611e15565b60019450505050505b92915050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611f028361106d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611f5382611e1b565b611f92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8990614c92565b60405180910390fd5b6000611f9d8361106d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061200c57508373ffffffffffffffffffffffffffffffffffffffff16611ff484610949565b73ffffffffffffffffffffffffffffffffffffffff16145b8061201d575061201c8185611b9e565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166120468261106d565b73ffffffffffffffffffffffffffffffffffffffff161461209c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209390614d24565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561210c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210390614db6565b60405180910390fd5b612117838383612d05565b612122600082611e8f565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121729190614246565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121c99190614ad3565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612288838383612d0a565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156122fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f390614e22565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516123ed91906131c2565b60405180910390a3505050565b612405848484612026565b61241184848484612d0f565b612450576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244790614eb4565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060008214156124b5576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506125c9565b600082905060005b600082146124e75780806124d090614ed4565b915050600a826124e09190614f4c565b91506124bd565b60008167ffffffffffffffff8111156125035761250261348d565b5b6040519080825280601f01601f1916602001820160405280156125355781602001600182028036833780820191505090505b5090505b600085146125c25760018261254e9190614246565b9150600a8561255d9190614f7d565b60306125699190614ad3565b60f81b81838151811061257f5761257e614b86565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856125bb9190614f4c565b9450612539565b8093505050505b919050565b60006125f0826000600281106125e7576125e6614b86565b5b1a60f81b612e97565b6125fd57600090506126c6565b61261d8260016002811061261457612613614b86565b5b1a60f81b612e97565b61262a57600090506126c6565b603660f81b8260006002811061264357612642614b86565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156126b35750603060f81b8260016002811061268a57612689614b86565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156126c157600090506126c6565b600190505b919050565b60006126ed826000600281106126e4576126e3614b86565b5b1a60f81b612e97565b6126fa57600090506127c3565b61271a8260016002811061271157612710614b86565b5b1a60f81b612e97565b61272757600090506127c3565b603660f81b826000600281106127405761273f614b86565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156127b05750603060f81b8260016002811061278757612786614b86565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156127be57600090506127c3565b600190505b919050565b60006127ea826000600581106127e1576127e0614b86565b5b1a60f81b612e97565b6127f75760009050612947565b6128178260016005811061280e5761280d614b86565b5b1a60f81b612e97565b6128245760009050612947565b6128448260026005811061283b5761283a614b86565b5b1a60f81b612f0a565b6128515760009050612947565b6128718260036005811061286857612867614b86565b5b1a60f81b612e97565b61287e5760009050612947565b61289e8260046005811061289557612894614b86565b5b1a60f81b612e97565b6128ab5760009050612947565b603660f81b826000600581106128c4576128c3614b86565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156129345750603060f81b8260016005811061290b5761290a614b86565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156129425760009050612947565b600190505b919050565b600061296e8260006003811061296557612964614b86565b5b1a60f81b612f4c565b61297b5760009050612a71565b61299b8260016003811061299257612991614b86565b5b1a60f81b612e97565b6129a85760009050612a71565b6129c8826002600381106129bf576129be614b86565b5b1a60f81b612e97565b6129d55760009050612a71565b603960f81b826001600381106129ee576129ed614b86565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148015612a5e5750603060f81b82600260038110612a3557612a34614b86565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b15612a6c5760009050612a71565b600190505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612add90614ffa565b60405180910390fd5b612aef81611e1b565b15612b2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2690615066565b60405180910390fd5b612b3b60008383612d05565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b8b9190614ad3565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612c4c60008383612d0a565b5050565b6000602060f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612c885760009050612c8d565b600190505b919050565b6000606160f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161080612ced5750607a60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916115b15612cfb5760009050612d00565b600190505b919050565b505050565b505050565b6000612d308473ffffffffffffffffffffffffffffffffffffffff16612fc2565b15612e8a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612d59611e87565b8786866040518563ffffffff1660e01b8152600401612d7b9493929190615086565b6020604051808303816000875af1925050508015612db757506040513d601f19601f82011682018060405250810190612db491906150e7565b60015b612e3a573d8060008114612de7576040519150601f19603f3d011682016040523d82523d6000602084013e612dec565b606091505b50600081511415612e32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2990614eb4565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612e8f565b600190505b949350505050565b6000603060f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161080612ef25750603960f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916115b15612f005760009050612f05565b600190505b919050565b6000602e60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612f425760009050612f47565b600190505b919050565b6000602b60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614158015612faa5750602d60f81b827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b15612fb85760009050612fbd565b600190505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612ff190613d5e565b90600052602060002090601f016020900481019282613013576000855561305a565b82601f1061302c57803560ff191683800117855561305a565b8280016001018555821561305a579182015b8281111561305957823582559160200191906001019061303e565b5b50905061306791906130f1565b5090565b82805461307790613d5e565b90600052602060002090601f01602090048101928261309957600085556130e0565b82601f106130b257805160ff19168380011785556130e0565b828001600101855582156130e0579182015b828111156130df5782518255916020019190600101906130c4565b5b5090506130ed91906130f1565b5090565b5b8082111561310a5760008160009055506001016130f2565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61315781613122565b811461316257600080fd5b50565b6000813590506131748161314e565b92915050565b6000602082840312156131905761318f613118565b5b600061319e84828501613165565b91505092915050565b60008115159050919050565b6131bc816131a7565b82525050565b60006020820190506131d760008301846131b3565b92915050565b6000819050919050565b6131f0816131dd565b81146131fb57600080fd5b50565b60008135905061320d816131e7565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261323857613237613213565b5b8235905067ffffffffffffffff81111561325557613254613218565b5b6020830191508360018202830111156132715761327061321d565b5b9250929050565b60008060006040848603121561329157613290613118565b5b600061329f868287016131fe565b935050602084013567ffffffffffffffff8111156132c0576132bf61311d565b5b6132cc86828701613222565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156133125780820151818401526020810190506132f7565b83811115613321576000848401525b50505050565b6000601f19601f8301169050919050565b6000613343826132d8565b61334d81856132e3565b935061335d8185602086016132f4565b61336681613327565b840191505092915050565b6000602082019050818103600083015261338b8184613338565b905092915050565b6000602082840312156133a9576133a8613118565b5b60006133b7848285016131fe565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006133eb826133c0565b9050919050565b6133fb816133e0565b82525050565b600060208201905061341660008301846133f2565b92915050565b613425816133e0565b811461343057600080fd5b50565b6000813590506134428161341c565b92915050565b6000806040838503121561345f5761345e613118565b5b600061346d85828601613433565b925050602061347e858286016131fe565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6134c582613327565b810181811067ffffffffffffffff821117156134e4576134e361348d565b5b80604052505050565b60006134f761310e565b905061350382826134bc565b919050565b600067ffffffffffffffff8211156135235761352261348d565b5b61352c82613327565b9050602081019050919050565b82818337600083830152505050565b600061355b61355684613508565b6134ed565b90508281526020810184848401111561357757613576613488565b5b613582848285613539565b509392505050565b600082601f83011261359f5761359e613213565b5b81356135af848260208601613548565b91505092915050565b6000602082840312156135ce576135cd613118565b5b600082013567ffffffffffffffff8111156135ec576135eb61311d565b5b6135f88482850161358a565b91505092915050565b61360a816131dd565b82525050565b60006020820190506136256000830184613601565b92915050565b60008060006060848603121561364457613643613118565b5b600061365286828701613433565b935050602061366386828701613433565b9250506040613674868287016131fe565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60006136a58261367e565b6136af8185613689565b93506136bf8185602086016132f4565b6136c881613327565b840191505092915050565b60007fffff00000000000000000000000000000000000000000000000000000000000082169050919050565b613708816136d3565b82525050565b60007fffffffffff00000000000000000000000000000000000000000000000000000082169050919050565b6137438161370e565b82525050565b60007fffffff000000000000000000000000000000000000000000000000000000000082169050919050565b61377e81613749565b82525050565b600060e082019050818103600083015261379e818a61369a565b90506137ad60208301896136ff565b6137ba60408301886136ff565b6137c7606083018761373a565b6137d46080830186613775565b6137e160a08301856136ff565b6137ee60c083018461373a565b98975050505050505050565b6000806040838503121561381157613810613118565b5b600061381f858286016131fe565b9250506020613830858286016131fe565b9150509250929050565b6000602082840312156138505761384f613118565b5b600061385e84828501613433565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61389c816131dd565b82525050565b60006138ae8383613893565b60208301905092915050565b6000602082019050919050565b60006138d282613867565b6138dc8185613872565b93506138e783613883565b8060005b838110156139185781516138ff88826138a2565b975061390a836138ba565b9250506001810190506138eb565b5085935050505092915050565b6000602082019050818103600083015261393f81846138c7565b905092915050565b613950816131a7565b811461395b57600080fd5b50565b60008135905061396d81613947565b92915050565b6000806040838503121561398a57613989613118565b5b600061399885828601613433565b92505060206139a98582860161395e565b9150509250929050565b600080600080608085870312156139cd576139cc613118565b5b60006139db87828801613433565b94505060206139ec87828801613433565b93505060406139fd878288016131fe565b925050606085013567ffffffffffffffff811115613a1e57613a1d61311d565b5b613a2a8782880161358a565b91505092959194509250565b60008060008060408587031215613a5057613a4f613118565b5b600085013567ffffffffffffffff811115613a6e57613a6d61311d565b5b613a7a87828801613222565b9450945050602085013567ffffffffffffffff811115613a9d57613a9c61311d565b5b613aa987828801613222565b925092505092959194509250565b60007fffffffffffffffffffffffffffffffffffffff0000000000000000000000000082169050919050565b613aec81613ab7565b8114613af757600080fd5b50565b600081359050613b0981613ae3565b92915050565b600060208284031215613b2557613b24613118565b5b6000613b3384828501613afa565b91505092915050565b60008060408385031215613b5357613b52613118565b5b6000613b6185828601613433565b9250506020613b7285828601613433565b9150509250929050565b7f596f752063616e277420656469742061205374617220796f7520646f6e27742060008201527f6f776e0000000000000000000000000000000000000000000000000000000000602082015250565b6000613bd86023836132e3565b9150613be382613b7c565b604082019050919050565b60006020820190508181036000830152613c0781613bcb565b9050919050565b7f53746172206e616d6520696e76616c6964000000000000000000000000000000600082015250565b6000613c446011836132e3565b9150613c4f82613c0e565b602082019050919050565b60006020820190508181036000830152613c7381613c37565b9050919050565b600081905092915050565b6000613c918385613c7a565b9350613c9e838584613539565b82840190509392505050565b6000613cb7828486613c85565b91508190509392505050565b7f53746172206e616d652063757272656e746c7920696e20757365000000000000600082015250565b6000613cf9601a836132e3565b9150613d0482613cc3565b602082019050919050565b60006020820190508181036000830152613d2881613cec565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613d7657607f821691505b60208210811415613d8a57613d89613d2f565b5b50919050565b60008190508160005260206000209050919050565b60008154613db281613d5e565b613dbc8186613c7a565b94506001821660008114613dd75760018114613de857613e1b565b60ff19831686528186019350613e1b565b613df185613d90565b60005b83811015613e1357815481890152600182019150602081019050613df4565b838801955050505b50505092915050565b6000613e308284613da5565b915081905092915050565b6000613e478385613689565b9350613e54838584613539565b613e5d83613327565b840190509392505050565b6000604082019050613e7d6000830186613601565b8181036020830152613e90818486613e3b565b9050949350505050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613ef6602c836132e3565b9150613f0182613e9a565b604082019050919050565b60006020820190508181036000830152613f2581613ee9565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613f886021836132e3565b9150613f9382613f2c565b604082019050919050565b60006020820190508181036000830152613fb781613f7b565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b600061401a6038836132e3565b915061402582613fbe565b604082019050919050565b600060208201905081810360008301526140498161400d565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006140ac6031836132e3565b91506140b782614050565b604082019050919050565b600060208201905081810360008301526140db8161409f565b9050919050565b7f5468652053746172206973206e6f7420757020666f722073616c650000000000600082015250565b6000614118601b836132e3565b9150614123826140e2565b602082019050919050565b600060208201905081810360008301526141478161410b565b9050919050565b7f4e6f7420656e6f75676820457468657220746f2062757920746869732053746160008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006141aa6021836132e3565b91506141b58261414e565b604082019050919050565b600060208201905081810360008301526141d98161419d565b9050919050565b60006060820190506141f560008301866133f2565b61420260208301856133f2565b61420f6040830184613601565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614251826131dd565b915061425c836131dd565b92508282101561426f5761426e614217565b5b828203905092915050565b600060408201905061428f6000830185613601565b61429c60208301846133f2565b9392505050565b7f596f752063616e27742073656c6c2061205374617220796f7520646f6e27742060008201527f6f776e0000000000000000000000000000000000000000000000000000000000602082015250565b60006142ff6023836132e3565b915061430a826142a3565b604082019050919050565b6000602082019050818103600083015261432e816142f2565b9050919050565b600060408201905061434a6000830185613601565b6143576020830184613601565b9392505050565b7f596f752063616e27742072656d6f76652066726f6d2073616c6520612053746160008201527f7220796f7520646f6e2774206f776e0000000000000000000000000000000000602082015250565b60006143ba602f836132e3565b91506143c58261435e565b604082019050919050565b600060208201905081810360008301526143e9816143ad565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b600061444c6029836132e3565b9150614457826143f0565b604082019050919050565b6000602082019050818103600083015261447b8161443f565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b60006144de602a836132e3565b91506144e982614482565b604082019050919050565b6000602082019050818103600083015261450d816144d1565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000614570602f836132e3565b915061457b82614514565b604082019050919050565b6000602082019050818103600083015261459f81614563565b9050919050565b600081905092915050565b60006145bc826132d8565b6145c681856145a6565b93506145d68185602086016132f4565b80840191505092915050565b60006145ee82856145b1565b91506145fa82846145b1565b91508190509392505050565b600080fd5b600080fd5b6000808585111561462457614623614606565b5b838611156146355761463461460b565b5b6001850283019150848603905094509492505050565b600082905092915050565b600082821b905092915050565b600061466f838361464b565b8261467a81356136d3565b925060028210156146ba576146b57fffff00000000000000000000000000000000000000000000000000000000000083600203600802614656565b831692505b505092915050565b7f526967687420617363656e73696f6e20686f75727320696e76616c6964000000600082015250565b60006146f8601d836132e3565b9150614703826146c2565b602082019050919050565b60006020820190508181036000830152614727816146eb565b9050919050565b7f526967687420617363656e73696f6e206d696e7574657320696e76616c696400600082015250565b6000614764601f836132e3565b915061476f8261472e565b602082019050919050565b6000602082019050818103600083015261479381614757565b9050919050565b60006147a6838361464b565b826147b1813561370e565b925060058210156147f1576147ec7fffffffffff00000000000000000000000000000000000000000000000000000083600503600802614656565b831692505b505092915050565b7f526967687420617363656e73696f6e207365636f6e647320696e76616c696400600082015250565b600061482f601f836132e3565b915061483a826147f9565b602082019050919050565b6000602082019050818103600083015261485e81614822565b9050919050565b6000614871838361464b565b8261487c8135613749565b925060038210156148bc576148b77fffffff000000000000000000000000000000000000000000000000000000000083600303600802614656565b831692505b505092915050565b7f4465636c696e6174696f6e206465677265657320696e76616c69640000000000600082015250565b60006148fa601b836132e3565b9150614905826148c4565b602082019050919050565b60006020820190508181036000830152614929816148ed565b9050919050565b7f4465636c696e6174696f6e20617263206d696e7574657320696e76616c696400600082015250565b6000614966601f836132e3565b915061497182614930565b602082019050919050565b6000602082019050818103600083015261499581614959565b9050919050565b7f4465636c696e6174696f6e20617263207365636f6e647320696e76616c696400600082015250565b60006149d2601f836132e3565b91506149dd8261499c565b602082019050919050565b60006020820190508181036000830152614a01816149c5565b9050919050565b6000614a14838361464b565b82614a1f8135613ab7565b92506013821015614a5f57614a5a7fffffffffffffffffffffffffffffffffffffff0000000000000000000000000083601303600802614656565b831692505b505092915050565b7f5374617220636f6f7264696e61746520616c7265616479206578697374730000600082015250565b6000614a9d601e836132e3565b9150614aa882614a67565b602082019050919050565b60006020820190508181036000830152614acc81614a90565b9050919050565b6000614ade826131dd565b9150614ae9836131dd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614b1e57614b1d614217565b5b828201905092915050565b614b3281613ab7565b82525050565b6000608082019050614b4d60008301886133f2565b614b5a6020830187613601565b614b676040830186614b29565b8181036060830152614b7a818486613e3b565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff82169050919050565b6000614bcd82614bb5565b9150614bd883614bb5565b925082821015614beb57614bea614217565b5b828203905092915050565b6000614c0182614bb5565b915060ff821415614c1557614c14614217565b5b600182019050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614c7c602c836132e3565b9150614c8782614c20565b604082019050919050565b60006020820190508181036000830152614cab81614c6f565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614d0e6025836132e3565b9150614d1982614cb2565b604082019050919050565b60006020820190508181036000830152614d3d81614d01565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614da06024836132e3565b9150614dab82614d44565b604082019050919050565b60006020820190508181036000830152614dcf81614d93565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614e0c6019836132e3565b9150614e1782614dd6565b602082019050919050565b60006020820190508181036000830152614e3b81614dff565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614e9e6032836132e3565b9150614ea982614e42565b604082019050919050565b60006020820190508181036000830152614ecd81614e91565b9050919050565b6000614edf826131dd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614f1257614f11614217565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614f57826131dd565b9150614f62836131dd565b925082614f7257614f71614f1d565b5b828204905092915050565b6000614f88826131dd565b9150614f93836131dd565b925082614fa357614fa2614f1d565b5b828206905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614fe46020836132e3565b9150614fef82614fae565b602082019050919050565b6000602082019050818103600083015261501381614fd7565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615050601c836132e3565b915061505b8261501a565b602082019050919050565b6000602082019050818103600083015261507f81615043565b9050919050565b600060808201905061509b60008301876133f2565b6150a860208301866133f2565b6150b56040830185613601565b81810360608301526150c7818461369a565b905095945050505050565b6000815190506150e18161314e565b92915050565b6000602082840312156150fd576150fc613118565b5b600061510b848285016150d2565b9150509291505056fea264697066735822122000ff023911328372963b6d1bfb98eeb57c6d1686f75c0f13fdbb2b615b0961c864736f6c634300080b0033",
}

// StarnotaryABI is the input ABI used to generate the binding from.
// Deprecated: Use StarnotaryMetaData.ABI instead.
var StarnotaryABI = StarnotaryMetaData.ABI

// StarnotaryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StarnotaryMetaData.Bin instead.
var StarnotaryBin = StarnotaryMetaData.Bin

// DeployStarnotary deploys a new Ethereum contract, binding an instance of Starnotary to it.
func DeployStarnotary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Starnotary, error) {
	parsed, err := StarnotaryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StarnotaryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Starnotary{StarnotaryCaller: StarnotaryCaller{contract: contract}, StarnotaryTransactor: StarnotaryTransactor{contract: contract}, StarnotaryFilterer: StarnotaryFilterer{contract: contract}}, nil
}

// Starnotary is an auto generated Go binding around an Ethereum contract.
type Starnotary struct {
	StarnotaryCaller     // Read-only binding to the contract
	StarnotaryTransactor // Write-only binding to the contract
	StarnotaryFilterer   // Log filterer for contract events
}

// StarnotaryCaller is an auto generated read-only Go binding around an Ethereum contract.
type StarnotaryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StarnotaryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StarnotaryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StarnotaryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StarnotaryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StarnotarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StarnotarySession struct {
	Contract     *Starnotary       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StarnotaryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StarnotaryCallerSession struct {
	Contract *StarnotaryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// StarnotaryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StarnotaryTransactorSession struct {
	Contract     *StarnotaryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// StarnotaryRaw is an auto generated low-level Go binding around an Ethereum contract.
type StarnotaryRaw struct {
	Contract *Starnotary // Generic contract binding to access the raw methods on
}

// StarnotaryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StarnotaryCallerRaw struct {
	Contract *StarnotaryCaller // Generic read-only contract binding to access the raw methods on
}

// StarnotaryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StarnotaryTransactorRaw struct {
	Contract *StarnotaryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStarnotary creates a new instance of Starnotary, bound to a specific deployed contract.
func NewStarnotary(address common.Address, backend bind.ContractBackend) (*Starnotary, error) {
	contract, err := bindStarnotary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Starnotary{StarnotaryCaller: StarnotaryCaller{contract: contract}, StarnotaryTransactor: StarnotaryTransactor{contract: contract}, StarnotaryFilterer: StarnotaryFilterer{contract: contract}}, nil
}

// NewStarnotaryCaller creates a new read-only instance of Starnotary, bound to a specific deployed contract.
func NewStarnotaryCaller(address common.Address, caller bind.ContractCaller) (*StarnotaryCaller, error) {
	contract, err := bindStarnotary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StarnotaryCaller{contract: contract}, nil
}

// NewStarnotaryTransactor creates a new write-only instance of Starnotary, bound to a specific deployed contract.
func NewStarnotaryTransactor(address common.Address, transactor bind.ContractTransactor) (*StarnotaryTransactor, error) {
	contract, err := bindStarnotary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StarnotaryTransactor{contract: contract}, nil
}

// NewStarnotaryFilterer creates a new log filterer instance of Starnotary, bound to a specific deployed contract.
func NewStarnotaryFilterer(address common.Address, filterer bind.ContractFilterer) (*StarnotaryFilterer, error) {
	contract, err := bindStarnotary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StarnotaryFilterer{contract: contract}, nil
}

// bindStarnotary binds a generic wrapper to an already deployed contract.
func bindStarnotary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StarnotaryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Starnotary *StarnotaryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Starnotary.Contract.StarnotaryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Starnotary *StarnotaryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Starnotary.Contract.StarnotaryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Starnotary *StarnotaryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Starnotary.Contract.StarnotaryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Starnotary *StarnotaryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Starnotary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Starnotary *StarnotaryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Starnotary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Starnotary *StarnotaryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Starnotary.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Starnotary *StarnotaryCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Starnotary *StarnotarySession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Starnotary.Contract.BalanceOf(&_Starnotary.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Starnotary *StarnotaryCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Starnotary.Contract.BalanceOf(&_Starnotary.CallOpts, owner)
}

// CoordinatesToTokenId is a free data retrieval call binding the contract method 0xe48b3961.
//
// Solidity: function coordinatesToTokenId(bytes19 ) view returns(uint256)
func (_Starnotary *StarnotaryCaller) CoordinatesToTokenId(opts *bind.CallOpts, arg0 [19]byte) (*big.Int, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "coordinatesToTokenId", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CoordinatesToTokenId is a free data retrieval call binding the contract method 0xe48b3961.
//
// Solidity: function coordinatesToTokenId(bytes19 ) view returns(uint256)
func (_Starnotary *StarnotarySession) CoordinatesToTokenId(arg0 [19]byte) (*big.Int, error) {
	return _Starnotary.Contract.CoordinatesToTokenId(&_Starnotary.CallOpts, arg0)
}

// CoordinatesToTokenId is a free data retrieval call binding the contract method 0xe48b3961.
//
// Solidity: function coordinatesToTokenId(bytes19 ) view returns(uint256)
func (_Starnotary *StarnotaryCallerSession) CoordinatesToTokenId(arg0 [19]byte) (*big.Int, error) {
	return _Starnotary.Contract.CoordinatesToTokenId(&_Starnotary.CallOpts, arg0)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Starnotary *StarnotaryCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Starnotary *StarnotarySession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Starnotary.Contract.GetApproved(&_Starnotary.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Starnotary *StarnotaryCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Starnotary.Contract.GetApproved(&_Starnotary.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Starnotary *StarnotaryCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Starnotary *StarnotarySession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Starnotary.Contract.IsApprovedForAll(&_Starnotary.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Starnotary *StarnotaryCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Starnotary.Contract.IsApprovedForAll(&_Starnotary.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Starnotary *StarnotaryCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Starnotary *StarnotarySession) Name() (string, error) {
	return _Starnotary.Contract.Name(&_Starnotary.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Starnotary *StarnotaryCallerSession) Name() (string, error) {
	return _Starnotary.Contract.Name(&_Starnotary.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Starnotary *StarnotaryCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Starnotary *StarnotarySession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Starnotary.Contract.OwnerOf(&_Starnotary.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Starnotary *StarnotaryCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Starnotary.Contract.OwnerOf(&_Starnotary.CallOpts, tokenId)
}

// StarNameToTokenId is a free data retrieval call binding the contract method 0x1350601b.
//
// Solidity: function starNameToTokenId(bytes ) view returns(uint256)
func (_Starnotary *StarnotaryCaller) StarNameToTokenId(opts *bind.CallOpts, arg0 []byte) (*big.Int, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "starNameToTokenId", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StarNameToTokenId is a free data retrieval call binding the contract method 0x1350601b.
//
// Solidity: function starNameToTokenId(bytes ) view returns(uint256)
func (_Starnotary *StarnotarySession) StarNameToTokenId(arg0 []byte) (*big.Int, error) {
	return _Starnotary.Contract.StarNameToTokenId(&_Starnotary.CallOpts, arg0)
}

// StarNameToTokenId is a free data retrieval call binding the contract method 0x1350601b.
//
// Solidity: function starNameToTokenId(bytes ) view returns(uint256)
func (_Starnotary *StarnotaryCallerSession) StarNameToTokenId(arg0 []byte) (*big.Int, error) {
	return _Starnotary.Contract.StarNameToTokenId(&_Starnotary.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Starnotary *StarnotaryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Starnotary *StarnotarySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Starnotary.Contract.SupportsInterface(&_Starnotary.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Starnotary *StarnotaryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Starnotary.Contract.SupportsInterface(&_Starnotary.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Starnotary *StarnotaryCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Starnotary *StarnotarySession) Symbol() (string, error) {
	return _Starnotary.Contract.Symbol(&_Starnotary.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Starnotary *StarnotaryCallerSession) Symbol() (string, error) {
	return _Starnotary.Contract.Symbol(&_Starnotary.CallOpts)
}

// TokenIdToSalePrice is a free data retrieval call binding the contract method 0xcfa92af9.
//
// Solidity: function tokenIdToSalePrice(uint256 ) view returns(uint256)
func (_Starnotary *StarnotaryCaller) TokenIdToSalePrice(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "tokenIdToSalePrice", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenIdToSalePrice is a free data retrieval call binding the contract method 0xcfa92af9.
//
// Solidity: function tokenIdToSalePrice(uint256 ) view returns(uint256)
func (_Starnotary *StarnotarySession) TokenIdToSalePrice(arg0 *big.Int) (*big.Int, error) {
	return _Starnotary.Contract.TokenIdToSalePrice(&_Starnotary.CallOpts, arg0)
}

// TokenIdToSalePrice is a free data retrieval call binding the contract method 0xcfa92af9.
//
// Solidity: function tokenIdToSalePrice(uint256 ) view returns(uint256)
func (_Starnotary *StarnotaryCallerSession) TokenIdToSalePrice(arg0 *big.Int) (*big.Int, error) {
	return _Starnotary.Contract.TokenIdToSalePrice(&_Starnotary.CallOpts, arg0)
}

// TokenIdToStar is a free data retrieval call binding the contract method 0x267d9ae1.
//
// Solidity: function tokenIdToStar(uint256 ) view returns(bytes name, bytes2 RAHours, bytes2 RAMinutes, bytes5 RASeconds, bytes3 decDegrees, bytes2 decArcMinutes, bytes5 decArcSeconds)
func (_Starnotary *StarnotaryCaller) TokenIdToStar(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Name          []byte
	RAHours       [2]byte
	RAMinutes     [2]byte
	RASeconds     [5]byte
	DecDegrees    [3]byte
	DecArcMinutes [2]byte
	DecArcSeconds [5]byte
}, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "tokenIdToStar", arg0)

	outstruct := new(struct {
		Name          []byte
		RAHours       [2]byte
		RAMinutes     [2]byte
		RASeconds     [5]byte
		DecDegrees    [3]byte
		DecArcMinutes [2]byte
		DecArcSeconds [5]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.RAHours = *abi.ConvertType(out[1], new([2]byte)).(*[2]byte)
	outstruct.RAMinutes = *abi.ConvertType(out[2], new([2]byte)).(*[2]byte)
	outstruct.RASeconds = *abi.ConvertType(out[3], new([5]byte)).(*[5]byte)
	outstruct.DecDegrees = *abi.ConvertType(out[4], new([3]byte)).(*[3]byte)
	outstruct.DecArcMinutes = *abi.ConvertType(out[5], new([2]byte)).(*[2]byte)
	outstruct.DecArcSeconds = *abi.ConvertType(out[6], new([5]byte)).(*[5]byte)

	return *outstruct, err

}

// TokenIdToStar is a free data retrieval call binding the contract method 0x267d9ae1.
//
// Solidity: function tokenIdToStar(uint256 ) view returns(bytes name, bytes2 RAHours, bytes2 RAMinutes, bytes5 RASeconds, bytes3 decDegrees, bytes2 decArcMinutes, bytes5 decArcSeconds)
func (_Starnotary *StarnotarySession) TokenIdToStar(arg0 *big.Int) (struct {
	Name          []byte
	RAHours       [2]byte
	RAMinutes     [2]byte
	RASeconds     [5]byte
	DecDegrees    [3]byte
	DecArcMinutes [2]byte
	DecArcSeconds [5]byte
}, error) {
	return _Starnotary.Contract.TokenIdToStar(&_Starnotary.CallOpts, arg0)
}

// TokenIdToStar is a free data retrieval call binding the contract method 0x267d9ae1.
//
// Solidity: function tokenIdToStar(uint256 ) view returns(bytes name, bytes2 RAHours, bytes2 RAMinutes, bytes5 RASeconds, bytes3 decDegrees, bytes2 decArcMinutes, bytes5 decArcSeconds)
func (_Starnotary *StarnotaryCallerSession) TokenIdToStar(arg0 *big.Int) (struct {
	Name          []byte
	RAHours       [2]byte
	RAMinutes     [2]byte
	RASeconds     [5]byte
	DecDegrees    [3]byte
	DecArcMinutes [2]byte
	DecArcSeconds [5]byte
}, error) {
	return _Starnotary.Contract.TokenIdToStar(&_Starnotary.CallOpts, arg0)
}

// TokenIds is a free data retrieval call binding the contract method 0x714cff56.
//
// Solidity: function tokenIds() view returns(uint256[])
func (_Starnotary *StarnotaryCaller) TokenIds(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "tokenIds")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokenIds is a free data retrieval call binding the contract method 0x714cff56.
//
// Solidity: function tokenIds() view returns(uint256[])
func (_Starnotary *StarnotarySession) TokenIds() ([]*big.Int, error) {
	return _Starnotary.Contract.TokenIds(&_Starnotary.CallOpts)
}

// TokenIds is a free data retrieval call binding the contract method 0x714cff56.
//
// Solidity: function tokenIds() view returns(uint256[])
func (_Starnotary *StarnotaryCallerSession) TokenIds() ([]*big.Int, error) {
	return _Starnotary.Contract.TokenIds(&_Starnotary.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Starnotary *StarnotaryCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Starnotary *StarnotarySession) TokenURI(tokenId *big.Int) (string, error) {
	return _Starnotary.Contract.TokenURI(&_Starnotary.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Starnotary *StarnotaryCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Starnotary.Contract.TokenURI(&_Starnotary.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Starnotary *StarnotaryCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Starnotary.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Starnotary *StarnotarySession) TotalSupply() (*big.Int, error) {
	return _Starnotary.Contract.TotalSupply(&_Starnotary.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Starnotary *StarnotaryCallerSession) TotalSupply() (*big.Int, error) {
	return _Starnotary.Contract.TotalSupply(&_Starnotary.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Starnotary *StarnotaryTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Starnotary *StarnotarySession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.Approve(&_Starnotary.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Starnotary *StarnotaryTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.Approve(&_Starnotary.TransactOpts, to, tokenId)
}

// BuyStar is a paid mutator transaction binding the contract method 0x2f1c34ef.
//
// Solidity: function buyStar(uint256 _tokenId) payable returns()
func (_Starnotary *StarnotaryTransactor) BuyStar(opts *bind.TransactOpts, _tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "buyStar", _tokenId)
}

// BuyStar is a paid mutator transaction binding the contract method 0x2f1c34ef.
//
// Solidity: function buyStar(uint256 _tokenId) payable returns()
func (_Starnotary *StarnotarySession) BuyStar(_tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.BuyStar(&_Starnotary.TransactOpts, _tokenId)
}

// BuyStar is a paid mutator transaction binding the contract method 0x2f1c34ef.
//
// Solidity: function buyStar(uint256 _tokenId) payable returns()
func (_Starnotary *StarnotaryTransactorSession) BuyStar(_tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.BuyStar(&_Starnotary.TransactOpts, _tokenId)
}

// ChangeStarName is a paid mutator transaction binding the contract method 0x04a4a48c.
//
// Solidity: function changeStarName(uint256 _tokenId, bytes _name) returns()
func (_Starnotary *StarnotaryTransactor) ChangeStarName(opts *bind.TransactOpts, _tokenId *big.Int, _name []byte) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "changeStarName", _tokenId, _name)
}

// ChangeStarName is a paid mutator transaction binding the contract method 0x04a4a48c.
//
// Solidity: function changeStarName(uint256 _tokenId, bytes _name) returns()
func (_Starnotary *StarnotarySession) ChangeStarName(_tokenId *big.Int, _name []byte) (*types.Transaction, error) {
	return _Starnotary.Contract.ChangeStarName(&_Starnotary.TransactOpts, _tokenId, _name)
}

// ChangeStarName is a paid mutator transaction binding the contract method 0x04a4a48c.
//
// Solidity: function changeStarName(uint256 _tokenId, bytes _name) returns()
func (_Starnotary *StarnotaryTransactorSession) ChangeStarName(_tokenId *big.Int, _name []byte) (*types.Transaction, error) {
	return _Starnotary.Contract.ChangeStarName(&_Starnotary.TransactOpts, _tokenId, _name)
}

// CreateStar is a paid mutator transaction binding the contract method 0xe0cc0cfb.
//
// Solidity: function createStar(bytes _name, bytes _coordinates) returns()
func (_Starnotary *StarnotaryTransactor) CreateStar(opts *bind.TransactOpts, _name []byte, _coordinates []byte) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "createStar", _name, _coordinates)
}

// CreateStar is a paid mutator transaction binding the contract method 0xe0cc0cfb.
//
// Solidity: function createStar(bytes _name, bytes _coordinates) returns()
func (_Starnotary *StarnotarySession) CreateStar(_name []byte, _coordinates []byte) (*types.Transaction, error) {
	return _Starnotary.Contract.CreateStar(&_Starnotary.TransactOpts, _name, _coordinates)
}

// CreateStar is a paid mutator transaction binding the contract method 0xe0cc0cfb.
//
// Solidity: function createStar(bytes _name, bytes _coordinates) returns()
func (_Starnotary *StarnotaryTransactorSession) CreateStar(_name []byte, _coordinates []byte) (*types.Transaction, error) {
	return _Starnotary.Contract.CreateStar(&_Starnotary.TransactOpts, _name, _coordinates)
}

// PutStarUpForSale is a paid mutator transaction binding the contract method 0x316a4361.
//
// Solidity: function putStarUpForSale(uint256 _tokenId, uint256 _price) returns()
func (_Starnotary *StarnotaryTransactor) PutStarUpForSale(opts *bind.TransactOpts, _tokenId *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "putStarUpForSale", _tokenId, _price)
}

// PutStarUpForSale is a paid mutator transaction binding the contract method 0x316a4361.
//
// Solidity: function putStarUpForSale(uint256 _tokenId, uint256 _price) returns()
func (_Starnotary *StarnotarySession) PutStarUpForSale(_tokenId *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.PutStarUpForSale(&_Starnotary.TransactOpts, _tokenId, _price)
}

// PutStarUpForSale is a paid mutator transaction binding the contract method 0x316a4361.
//
// Solidity: function putStarUpForSale(uint256 _tokenId, uint256 _price) returns()
func (_Starnotary *StarnotaryTransactorSession) PutStarUpForSale(_tokenId *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.PutStarUpForSale(&_Starnotary.TransactOpts, _tokenId, _price)
}

// RemoveStarFromSale is a paid mutator transaction binding the contract method 0x481d49e1.
//
// Solidity: function removeStarFromSale(uint256 _tokenId) returns()
func (_Starnotary *StarnotaryTransactor) RemoveStarFromSale(opts *bind.TransactOpts, _tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "removeStarFromSale", _tokenId)
}

// RemoveStarFromSale is a paid mutator transaction binding the contract method 0x481d49e1.
//
// Solidity: function removeStarFromSale(uint256 _tokenId) returns()
func (_Starnotary *StarnotarySession) RemoveStarFromSale(_tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.RemoveStarFromSale(&_Starnotary.TransactOpts, _tokenId)
}

// RemoveStarFromSale is a paid mutator transaction binding the contract method 0x481d49e1.
//
// Solidity: function removeStarFromSale(uint256 _tokenId) returns()
func (_Starnotary *StarnotaryTransactorSession) RemoveStarFromSale(_tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.RemoveStarFromSale(&_Starnotary.TransactOpts, _tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Starnotary *StarnotaryTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Starnotary *StarnotarySession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.SafeTransferFrom(&_Starnotary.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Starnotary *StarnotaryTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.SafeTransferFrom(&_Starnotary.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Starnotary *StarnotaryTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Starnotary *StarnotarySession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Starnotary.Contract.SafeTransferFrom0(&_Starnotary.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Starnotary *StarnotaryTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Starnotary.Contract.SafeTransferFrom0(&_Starnotary.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Starnotary *StarnotaryTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Starnotary *StarnotarySession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Starnotary.Contract.SetApprovalForAll(&_Starnotary.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Starnotary *StarnotaryTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Starnotary.Contract.SetApprovalForAll(&_Starnotary.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Starnotary *StarnotaryTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Starnotary *StarnotarySession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.TransferFrom(&_Starnotary.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Starnotary *StarnotaryTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Starnotary.Contract.TransferFrom(&_Starnotary.TransactOpts, from, to, tokenId)
}

// StarnotaryApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Starnotary contract.
type StarnotaryApprovalIterator struct {
	Event *StarnotaryApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryApproval represents a Approval event raised by the Starnotary contract.
type StarnotaryApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Starnotary *StarnotaryFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*StarnotaryApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StarnotaryApprovalIterator{contract: _Starnotary.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Starnotary *StarnotaryFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *StarnotaryApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryApproval)
				if err := _Starnotary.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Starnotary *StarnotaryFilterer) ParseApproval(log types.Log) (*StarnotaryApproval, error) {
	event := new(StarnotaryApproval)
	if err := _Starnotary.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Starnotary contract.
type StarnotaryApprovalForAllIterator struct {
	Event *StarnotaryApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryApprovalForAll represents a ApprovalForAll event raised by the Starnotary contract.
type StarnotaryApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Starnotary *StarnotaryFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*StarnotaryApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &StarnotaryApprovalForAllIterator{contract: _Starnotary.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Starnotary *StarnotaryFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *StarnotaryApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryApprovalForAll)
				if err := _Starnotary.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Starnotary *StarnotaryFilterer) ParseApprovalForAll(log types.Log) (*StarnotaryApprovalForAll, error) {
	event := new(StarnotaryApprovalForAll)
	if err := _Starnotary.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryBoughtIterator is returned from FilterBought and is used to iterate over the raw logs and unpacked data for Bought events raised by the Starnotary contract.
type StarnotaryBoughtIterator struct {
	Event *StarnotaryBought // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryBoughtIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryBought)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryBought)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryBoughtIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryBoughtIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryBought represents a Bought event raised by the Starnotary contract.
type StarnotaryBought struct {
	TokenId  *big.Int
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBought is a free log retrieval operation binding the contract event 0xc54c8cc1c7525b424ec71b685c00d9355581a280488018c22005332ceb2fd406.
//
// Solidity: event Bought(uint256 tokenId, address newOwner)
func (_Starnotary *StarnotaryFilterer) FilterBought(opts *bind.FilterOpts) (*StarnotaryBoughtIterator, error) {

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "Bought")
	if err != nil {
		return nil, err
	}
	return &StarnotaryBoughtIterator{contract: _Starnotary.contract, event: "Bought", logs: logs, sub: sub}, nil
}

// WatchBought is a free log subscription operation binding the contract event 0xc54c8cc1c7525b424ec71b685c00d9355581a280488018c22005332ceb2fd406.
//
// Solidity: event Bought(uint256 tokenId, address newOwner)
func (_Starnotary *StarnotaryFilterer) WatchBought(opts *bind.WatchOpts, sink chan<- *StarnotaryBought) (event.Subscription, error) {

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "Bought")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryBought)
				if err := _Starnotary.contract.UnpackLog(event, "Bought", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBought is a log parse operation binding the contract event 0xc54c8cc1c7525b424ec71b685c00d9355581a280488018c22005332ceb2fd406.
//
// Solidity: event Bought(uint256 tokenId, address newOwner)
func (_Starnotary *StarnotaryFilterer) ParseBought(log types.Log) (*StarnotaryBought, error) {
	event := new(StarnotaryBought)
	if err := _Starnotary.contract.UnpackLog(event, "Bought", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryChangedNameIterator is returned from FilterChangedName and is used to iterate over the raw logs and unpacked data for ChangedName events raised by the Starnotary contract.
type StarnotaryChangedNameIterator struct {
	Event *StarnotaryChangedName // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryChangedNameIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryChangedName)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryChangedName)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryChangedNameIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryChangedNameIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryChangedName represents a ChangedName event raised by the Starnotary contract.
type StarnotaryChangedName struct {
	TokenId *big.Int
	NewName []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterChangedName is a free log retrieval operation binding the contract event 0xdcf3e79b7e2fc5e0048b93f601737c62d3f1aa0e18679c5752762472ebc6e44d.
//
// Solidity: event ChangedName(uint256 tokenId, bytes newName)
func (_Starnotary *StarnotaryFilterer) FilterChangedName(opts *bind.FilterOpts) (*StarnotaryChangedNameIterator, error) {

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "ChangedName")
	if err != nil {
		return nil, err
	}
	return &StarnotaryChangedNameIterator{contract: _Starnotary.contract, event: "ChangedName", logs: logs, sub: sub}, nil
}

// WatchChangedName is a free log subscription operation binding the contract event 0xdcf3e79b7e2fc5e0048b93f601737c62d3f1aa0e18679c5752762472ebc6e44d.
//
// Solidity: event ChangedName(uint256 tokenId, bytes newName)
func (_Starnotary *StarnotaryFilterer) WatchChangedName(opts *bind.WatchOpts, sink chan<- *StarnotaryChangedName) (event.Subscription, error) {

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "ChangedName")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryChangedName)
				if err := _Starnotary.contract.UnpackLog(event, "ChangedName", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedName is a log parse operation binding the contract event 0xdcf3e79b7e2fc5e0048b93f601737c62d3f1aa0e18679c5752762472ebc6e44d.
//
// Solidity: event ChangedName(uint256 tokenId, bytes newName)
func (_Starnotary *StarnotaryFilterer) ParseChangedName(log types.Log) (*StarnotaryChangedName, error) {
	event := new(StarnotaryChangedName)
	if err := _Starnotary.contract.UnpackLog(event, "ChangedName", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryCreatedIterator is returned from FilterCreated and is used to iterate over the raw logs and unpacked data for Created events raised by the Starnotary contract.
type StarnotaryCreatedIterator struct {
	Event *StarnotaryCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryCreated represents a Created event raised by the Starnotary contract.
type StarnotaryCreated struct {
	Owner       common.Address
	TokenId     *big.Int
	Coordinates [19]byte
	Name        []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterCreated is a free log retrieval operation binding the contract event 0xc6c75e3dff0d786834a52d041dd27162b7b18821da7d44f32eda867409aff50b.
//
// Solidity: event Created(address owner, uint256 tokenId, bytes19 coordinates, bytes name)
func (_Starnotary *StarnotaryFilterer) FilterCreated(opts *bind.FilterOpts) (*StarnotaryCreatedIterator, error) {

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "Created")
	if err != nil {
		return nil, err
	}
	return &StarnotaryCreatedIterator{contract: _Starnotary.contract, event: "Created", logs: logs, sub: sub}, nil
}

// WatchCreated is a free log subscription operation binding the contract event 0xc6c75e3dff0d786834a52d041dd27162b7b18821da7d44f32eda867409aff50b.
//
// Solidity: event Created(address owner, uint256 tokenId, bytes19 coordinates, bytes name)
func (_Starnotary *StarnotaryFilterer) WatchCreated(opts *bind.WatchOpts, sink chan<- *StarnotaryCreated) (event.Subscription, error) {

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "Created")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryCreated)
				if err := _Starnotary.contract.UnpackLog(event, "Created", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreated is a log parse operation binding the contract event 0xc6c75e3dff0d786834a52d041dd27162b7b18821da7d44f32eda867409aff50b.
//
// Solidity: event Created(address owner, uint256 tokenId, bytes19 coordinates, bytes name)
func (_Starnotary *StarnotaryFilterer) ParseCreated(log types.Log) (*StarnotaryCreated, error) {
	event := new(StarnotaryCreated)
	if err := _Starnotary.contract.UnpackLog(event, "Created", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryPutForSaleIterator is returned from FilterPutForSale and is used to iterate over the raw logs and unpacked data for PutForSale events raised by the Starnotary contract.
type StarnotaryPutForSaleIterator struct {
	Event *StarnotaryPutForSale // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryPutForSaleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryPutForSale)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryPutForSale)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryPutForSaleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryPutForSaleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryPutForSale represents a PutForSale event raised by the Starnotary contract.
type StarnotaryPutForSale struct {
	TokenId    *big.Int
	PriceInWei *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPutForSale is a free log retrieval operation binding the contract event 0xff0b5cba073786b65e428a5466e81a88d5d7ad466738a382bfe518e0b6af1398.
//
// Solidity: event PutForSale(uint256 tokenId, uint256 priceInWei)
func (_Starnotary *StarnotaryFilterer) FilterPutForSale(opts *bind.FilterOpts) (*StarnotaryPutForSaleIterator, error) {

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "PutForSale")
	if err != nil {
		return nil, err
	}
	return &StarnotaryPutForSaleIterator{contract: _Starnotary.contract, event: "PutForSale", logs: logs, sub: sub}, nil
}

// WatchPutForSale is a free log subscription operation binding the contract event 0xff0b5cba073786b65e428a5466e81a88d5d7ad466738a382bfe518e0b6af1398.
//
// Solidity: event PutForSale(uint256 tokenId, uint256 priceInWei)
func (_Starnotary *StarnotaryFilterer) WatchPutForSale(opts *bind.WatchOpts, sink chan<- *StarnotaryPutForSale) (event.Subscription, error) {

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "PutForSale")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryPutForSale)
				if err := _Starnotary.contract.UnpackLog(event, "PutForSale", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePutForSale is a log parse operation binding the contract event 0xff0b5cba073786b65e428a5466e81a88d5d7ad466738a382bfe518e0b6af1398.
//
// Solidity: event PutForSale(uint256 tokenId, uint256 priceInWei)
func (_Starnotary *StarnotaryFilterer) ParsePutForSale(log types.Log) (*StarnotaryPutForSale, error) {
	event := new(StarnotaryPutForSale)
	if err := _Starnotary.contract.UnpackLog(event, "PutForSale", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryRemovedFromSaleIterator is returned from FilterRemovedFromSale and is used to iterate over the raw logs and unpacked data for RemovedFromSale events raised by the Starnotary contract.
type StarnotaryRemovedFromSaleIterator struct {
	Event *StarnotaryRemovedFromSale // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryRemovedFromSaleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryRemovedFromSale)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryRemovedFromSale)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryRemovedFromSaleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryRemovedFromSaleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryRemovedFromSale represents a RemovedFromSale event raised by the Starnotary contract.
type StarnotaryRemovedFromSale struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRemovedFromSale is a free log retrieval operation binding the contract event 0xc76903a01f28be0672203520b5bfb2cbb1e8df8c65020891d4a9cff0df01374d.
//
// Solidity: event RemovedFromSale(uint256 tokenId)
func (_Starnotary *StarnotaryFilterer) FilterRemovedFromSale(opts *bind.FilterOpts) (*StarnotaryRemovedFromSaleIterator, error) {

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "RemovedFromSale")
	if err != nil {
		return nil, err
	}
	return &StarnotaryRemovedFromSaleIterator{contract: _Starnotary.contract, event: "RemovedFromSale", logs: logs, sub: sub}, nil
}

// WatchRemovedFromSale is a free log subscription operation binding the contract event 0xc76903a01f28be0672203520b5bfb2cbb1e8df8c65020891d4a9cff0df01374d.
//
// Solidity: event RemovedFromSale(uint256 tokenId)
func (_Starnotary *StarnotaryFilterer) WatchRemovedFromSale(opts *bind.WatchOpts, sink chan<- *StarnotaryRemovedFromSale) (event.Subscription, error) {

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "RemovedFromSale")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryRemovedFromSale)
				if err := _Starnotary.contract.UnpackLog(event, "RemovedFromSale", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemovedFromSale is a log parse operation binding the contract event 0xc76903a01f28be0672203520b5bfb2cbb1e8df8c65020891d4a9cff0df01374d.
//
// Solidity: event RemovedFromSale(uint256 tokenId)
func (_Starnotary *StarnotaryFilterer) ParseRemovedFromSale(log types.Log) (*StarnotaryRemovedFromSale, error) {
	event := new(StarnotaryRemovedFromSale)
	if err := _Starnotary.contract.UnpackLog(event, "RemovedFromSale", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StarnotaryTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Starnotary contract.
type StarnotaryTransferIterator struct {
	Event *StarnotaryTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StarnotaryTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StarnotaryTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StarnotaryTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StarnotaryTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StarnotaryTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StarnotaryTransfer represents a Transfer event raised by the Starnotary contract.
type StarnotaryTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Starnotary *StarnotaryFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*StarnotaryTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Starnotary.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StarnotaryTransferIterator{contract: _Starnotary.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Starnotary *StarnotaryFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *StarnotaryTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Starnotary.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StarnotaryTransfer)
				if err := _Starnotary.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Starnotary *StarnotaryFilterer) ParseTransfer(log types.Log) (*StarnotaryTransfer, error) {
	event := new(StarnotaryTransfer)
	if err := _Starnotary.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
